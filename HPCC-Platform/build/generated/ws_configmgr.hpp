// *** Include file generated by HIDL Version 1.3 from ws_configmgr.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_configmgr_SCM_INCL
#define ws_configmgr_SCM_INCL

#include "esp.hpp"




interface IConstStatusMsgType : extends IEspStruct
{
	virtual const char * getMsgLevel()=0;
	virtual const char * getNodeId()=0;
	virtual const char * getNodeName()=0;
	virtual const char * getAttribute()=0;
	virtual const char * getMsg()=0;
	virtual StringArray & getParentIdList()=0;
};

interface IEspStatusMsgType : extends IConstStatusMsgType
{
	virtual void setMsgLevel(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
	virtual void setNodeName(const char * val)=0;
	virtual void setAttribute(const char * val)=0;
	virtual void setMsg(const char * val)=0;
	virtual void setParentIdList(StringArray &val)=0;
	virtual void copy(IConstStatusMsgType &from)=0;
};

interface IClientStatusMsgType : extends IInterface
{
	virtual void setMsgLevel(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
	virtual void setNodeName(const char * val)=0;
	virtual void setAttribute(const char * val)=0;
	virtual void setMsg(const char * val)=0;
	virtual void setParentIdList(StringArray &val)=0;
	virtual const char * getMsgLevel()=0;
	virtual const char * getNodeId()=0;
	virtual const char * getNodeName()=0;
	virtual const char * getAttribute()=0;
	virtual const char * getMsg()=0;
	virtual StringArray & getParentIdList()=0;
};




interface IConstStatusType : extends IEspStruct
{
	virtual bool getError()=0;
	virtual IArrayOf<IConstStatusMsgType> & getStatusMessages()=0;
};

interface IEspStatusType : extends IConstStatusType
{
	virtual void setError(bool val)=0;
	virtual void setStatusMessages(IArrayOf<IEspStatusMsgType> &val)=0;
	virtual void setStatusMessages(IArrayOf<IConstStatusMsgType> &val)=0;
	virtual void copy(IConstStatusType &from)=0;
};

interface IClientStatusType : extends IInterface
{
	virtual void setError(bool val)=0;
	virtual void setStatusMessages(IArrayOf<IEspStatusMsgType> &val)=0;
	virtual void setStatusMessages(IArrayOf<IConstStatusMsgType> &val)=0;
	virtual bool getError()=0;
	virtual IArrayOf<IConstStatusMsgType> & getStatusMessages()=0;
};




interface IConstEmptyResponse : extends IEspResponse
{
};

interface IEspEmptyResponse : extends IConstEmptyResponse
{
	virtual void copy(IConstEmptyResponse &from)=0;
};

interface IClientEmptyResponse : extends IInterface
{

	virtual int queryClientStatus()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstStatusResponse : extends IEspResponse
{
	virtual bool getEnvironmentModified()=0;
	virtual IConstStatusType & getStatus()=0;
};

interface IEspStatusResponse : extends IConstStatusResponse
{
	virtual void setEnvironmentModified(bool val)=0;
	virtual IEspStatusType & updateStatus()=0;
	virtual void setStatus(IConstStatusType &ifrom)=0;
	virtual void copy(IConstStatusResponse &from)=0;
};

interface IClientStatusResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual bool getEnvironmentModified()=0;
	virtual IConstStatusType & getStatus()=0;
};




//
// Session management (not to be confused with platform session management)

interface IConstOpenSessionRequest : extends IEspRequest
{
	virtual const char * getUsername()=0;
	virtual const char * getSchemaPath()=0;
	virtual const char * getMasterSchemaFile()=0;
	virtual const char * getSourcePath()=0;
	virtual const char * getActivePath()=0;
	virtual const char * getPluginPaths()=0;
};

interface IEspOpenSessionRequest : extends IConstOpenSessionRequest
{
	virtual void setUsername(const char * val)=0;
	virtual void setSchemaPath(const char * val)=0;
	virtual void setMasterSchemaFile(const char * val)=0;
	virtual void setSourcePath(const char * val)=0;
	virtual void setActivePath(const char * val)=0;
	virtual void setPluginPaths(const char * val)=0;
	virtual void copy(IConstOpenSessionRequest &from)=0;
};

interface IClientOpenSessionRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setUsername(const char * val)=0;
	virtual void setSchemaPath(const char * val)=0;
	virtual void setMasterSchemaFile(const char * val)=0;
	virtual void setSourcePath(const char * val)=0;
	virtual void setActivePath(const char * val)=0;
	virtual void setPluginPaths(const char * val)=0;
};




interface IConstOpenSessionResponse : extends IEspResponse
{
	virtual const char * getSessionId()=0;
};

interface IEspOpenSessionResponse : extends IConstOpenSessionResponse
{
	virtual void setSessionId(const char * val)=0;
	virtual void copy(IConstOpenSessionResponse &from)=0;
};

interface IClientOpenSessionResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getSessionId()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstCloseSessionRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual bool getForceClose()=0;
};

interface IEspCloseSessionRequest : extends IConstCloseSessionRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setForceClose(bool val)=0;
	virtual void copy(IConstCloseSessionRequest &from)=0;
};

interface IClientCloseSessionRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setForceClose(bool val)=0;
};




interface IConstListOpenSessionsRequest : extends IEspRequest
{
};

interface IEspListOpenSessionsRequest : extends IConstListOpenSessionsRequest
{
	virtual void copy(IConstListOpenSessionsRequest &from)=0;
};

interface IClientListOpenSessionsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};




interface IConstOpenSessionInfo : extends IEspStruct
{
	virtual const char * getUsername()=0;
	virtual const char * getCurEnvironmentFile()=0;
	virtual bool getLocked()=0;
	virtual bool getModified()=0;
};

interface IEspOpenSessionInfo : extends IConstOpenSessionInfo
{
	virtual void setUsername(const char * val)=0;
	virtual void setCurEnvironmentFile(const char * val)=0;
	virtual void setLocked(bool val)=0;
	virtual void setModified(bool val)=0;
	virtual void copy(IConstOpenSessionInfo &from)=0;
};

interface IClientOpenSessionInfo : extends IInterface
{
	virtual void setUsername(const char * val)=0;
	virtual void setCurEnvironmentFile(const char * val)=0;
	virtual void setLocked(bool val)=0;
	virtual void setModified(bool val)=0;
	virtual const char * getUsername()=0;
	virtual const char * getCurEnvironmentFile()=0;
	virtual bool getLocked()=0;
	virtual bool getModified()=0;
};




interface IConstListOpenSessionsResponse : extends IEspResponse
{
	virtual IArrayOf<IConstOpenSessionInfo> & getOpenSessions()=0;
};

interface IEspListOpenSessionsResponse : extends IConstListOpenSessionsResponse
{
	virtual void setOpenSessions(IArrayOf<IEspOpenSessionInfo> &val)=0;
	virtual void setOpenSessions(IArrayOf<IConstOpenSessionInfo> &val)=0;
	virtual void copy(IConstListOpenSessionsResponse &from)=0;
};

interface IClientListOpenSessionsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstOpenSessionInfo> & getOpenSessions()=0;

	virtual const IMultiException& getExceptions()=0;
};




//
// Node management

interface IConstGetNodeRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getNodeId()=0;
};

interface IEspGetNodeRequest : extends IConstGetNodeRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
	virtual void copy(IConstGetNodeRequest &from)=0;
};

interface IClientGetNodeRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
};




interface IConstGetParentsRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getNodeId()=0;
};

interface IEspGetParentsRequest : extends IConstGetParentsRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
	virtual void copy(IConstGetParentsRequest &from)=0;
};

interface IClientGetParentsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
};




interface IConstRemoveNodeRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getSessionLockKey()=0;
	virtual const char * getNodeId()=0;
};

interface IEspRemoveNodeRequest : extends IConstRemoveNodeRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
	virtual void copy(IConstRemoveNodeRequest &from)=0;
};

interface IClientRemoveNodeRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
};




interface IConstDependentValueType : extends IEspStruct
{
	virtual const char * getAttributeName()=0;
	virtual const char * getAttributeValue()=0;
};

interface IEspDependentValueType : extends IConstDependentValueType
{
	virtual void setAttributeName(const char * val)=0;
	virtual void setAttributeValue(const char * val)=0;
	virtual void copy(IConstDependentValueType &from)=0;
};

interface IClientDependentValueType : extends IInterface
{
	virtual void setAttributeName(const char * val)=0;
	virtual void setAttributeValue(const char * val)=0;
	virtual const char * getAttributeName()=0;
	virtual const char * getAttributeValue()=0;
};




interface IConstChoiceType : extends IEspStruct
{
	virtual const char * getDisplayName()=0;
	virtual const char * getValue()=0;
	virtual const char * getDesc()=0;
	virtual const char * getMsgType()=0;
	virtual const char * getMsg()=0;
	virtual IArrayOf<IConstDependentValueType> & getDependencies()=0;
	virtual StringArray & getOptionalAttributes()=0;
	virtual StringArray & getRequiredAttributes()=0;
};

interface IEspChoiceType : extends IConstChoiceType
{
	virtual void setDisplayName(const char * val)=0;
	virtual void setValue(const char * val)=0;
	virtual void setDesc(const char * val)=0;
	virtual void setMsgType(const char * val)=0;
	virtual void setMsg(const char * val)=0;
	virtual void setDependencies(IArrayOf<IEspDependentValueType> &val)=0;
	virtual void setDependencies(IArrayOf<IConstDependentValueType> &val)=0;
	virtual void setOptionalAttributes(StringArray &val)=0;
	virtual void setRequiredAttributes(StringArray &val)=0;
	virtual void copy(IConstChoiceType &from)=0;
};

interface IClientChoiceType : extends IInterface
{
	virtual void setDisplayName(const char * val)=0;
	virtual void setValue(const char * val)=0;
	virtual void setDesc(const char * val)=0;
	virtual void setMsgType(const char * val)=0;
	virtual void setMsg(const char * val)=0;
	virtual void setDependencies(IArrayOf<IEspDependentValueType> &val)=0;
	virtual void setDependencies(IArrayOf<IConstDependentValueType> &val)=0;
	virtual void setOptionalAttributes(StringArray &val)=0;
	virtual void setRequiredAttributes(StringArray &val)=0;
	virtual const char * getDisplayName()=0;
	virtual const char * getValue()=0;
	virtual const char * getDesc()=0;
	virtual const char * getMsgType()=0;
	virtual const char * getMsg()=0;
	virtual IArrayOf<IConstDependentValueType> & getDependencies()=0;
	virtual StringArray & getOptionalAttributes()=0;
	virtual StringArray & getRequiredAttributes()=0;
};



interface IConstLimitsType : extends IEspStruct
{
	virtual bool getMinValid()=0;
	virtual bool getMaxValid()=0;
	virtual int getMin()=0;
	virtual int getMax()=0;
	virtual bool getHasChoices()=0;
	virtual IArrayOf<IConstChoiceType> & getChoiceList()=0;
	virtual StringArray & getRegex()=0;
};

interface IEspLimitsType : extends IConstLimitsType
{
	virtual void setMinValid(bool val)=0;
	virtual void setMaxValid(bool val)=0;
	virtual void setMin(int val)=0;
	virtual void setMax(int val)=0;
	virtual void setHasChoices(bool val)=0;
	virtual void setChoiceList(IArrayOf<IEspChoiceType> &val)=0;
	virtual void setChoiceList(IArrayOf<IConstChoiceType> &val)=0;
	virtual void setRegex(StringArray &val)=0;
	virtual void copy(IConstLimitsType &from)=0;
};

interface IClientLimitsType : extends IInterface
{
	virtual void setMinValid(bool val)=0;
	virtual void setMaxValid(bool val)=0;
	virtual void setMin(int val)=0;
	virtual void setMax(int val)=0;
	virtual void setHasChoices(bool val)=0;
	virtual void setChoiceList(IArrayOf<IEspChoiceType> &val)=0;
	virtual void setChoiceList(IArrayOf<IConstChoiceType> &val)=0;
	virtual void setRegex(StringArray &val)=0;
	virtual bool getMinValid()=0;
	virtual bool getMaxValid()=0;
	virtual int getMin()=0;
	virtual int getMax()=0;
	virtual bool getHasChoices()=0;
	virtual IArrayOf<IConstChoiceType> & getChoiceList()=0;
	virtual StringArray & getRegex()=0;
};




interface IConstTypeInfo : extends IEspStruct
{
	virtual const char * getBaseType()=0;
	virtual const char * getSubType()=0;
	virtual IConstLimitsType & getLimits()=0;
};

interface IEspTypeInfo : extends IConstTypeInfo
{
	virtual void setBaseType(const char * val)=0;
	virtual void setSubType(const char * val)=0;
	virtual IEspLimitsType & updateLimits()=0;
	virtual void setLimits(IConstLimitsType &ifrom)=0;
	virtual void copy(IConstTypeInfo &from)=0;
};

interface IClientTypeInfo : extends IInterface
{
	virtual void setBaseType(const char * val)=0;
	virtual void setSubType(const char * val)=0;
	virtual IEspLimitsType & updateLimits()=0;
	virtual void setLimits(IConstLimitsType &ifrom)=0;
	virtual const char * getBaseType()=0;
	virtual const char * getSubType()=0;
	virtual IConstLimitsType & getLimits()=0;
};




interface IConstNodeInfoType : extends IEspStruct
{
	virtual const char * getDisplayName()=0;
	virtual const char * getNodeType()=0;
	virtual const char * getName()=0;
	virtual const char * getClass()=0;
	virtual const char * getCategory()=0;
	virtual bool getHidden()=0;
	virtual const char * getTooltip()=0;
};

interface IEspNodeInfoType : extends IConstNodeInfoType
{
	virtual void setDisplayName(const char * val)=0;
	virtual void setNodeType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setClass(const char * val)=0;
	virtual void setCategory(const char * val)=0;
	virtual void setHidden(bool val)=0;
	virtual void setTooltip(const char * val)=0;
	virtual void copy(IConstNodeInfoType &from)=0;
};

interface IClientNodeInfoType : extends IInterface
{
	virtual void setDisplayName(const char * val)=0;
	virtual void setNodeType(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setClass(const char * val)=0;
	virtual void setCategory(const char * val)=0;
	virtual void setHidden(bool val)=0;
	virtual void setTooltip(const char * val)=0;
	virtual const char * getDisplayName()=0;
	virtual const char * getNodeType()=0;
	virtual const char * getName()=0;
	virtual const char * getClass()=0;
	virtual const char * getCategory()=0;
	virtual bool getHidden()=0;
	virtual const char * getTooltip()=0;
};




interface IConstNode : extends IEspStruct
{
	virtual const char * getNodeId()=0;
	virtual int getNumChildren()=0;
	virtual IConstNodeInfoType & getNodeInfo()=0;
};

interface IEspNode : extends IConstNode
{
	virtual void setNodeId(const char * val)=0;
	virtual void setNumChildren(int val)=0;
	virtual IEspNodeInfoType & updateNodeInfo()=0;
	virtual void setNodeInfo(IConstNodeInfoType &ifrom)=0;
	virtual void copy(IConstNode &from)=0;
};

interface IClientNode : extends IInterface
{
	virtual void setNodeId(const char * val)=0;
	virtual void setNumChildren(int val)=0;
	virtual IEspNodeInfoType & updateNodeInfo()=0;
	virtual void setNodeInfo(IConstNodeInfoType &ifrom)=0;
	virtual const char * getNodeId()=0;
	virtual int getNumChildren()=0;
	virtual IConstNodeInfoType & getNodeInfo()=0;
};




interface IConstChoiceLimitType : extends IEspStruct
{
	virtual const char * getDisplayName()=0;
	virtual const char * getItemType()=0;
};

interface IEspChoiceLimitType : extends IConstChoiceLimitType
{
	virtual void setDisplayName(const char * val)=0;
	virtual void setItemType(const char * val)=0;
	virtual void copy(IConstChoiceLimitType &from)=0;
};

interface IClientChoiceLimitType : extends IInterface
{
	virtual void setDisplayName(const char * val)=0;
	virtual void setItemType(const char * val)=0;
	virtual const char * getDisplayName()=0;
	virtual const char * getItemType()=0;
};




interface IConstInsertItemType : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getNodeType()=0;
	virtual const char * getClass()=0;
	virtual const char * getCategory()=0;
	virtual bool getRequired()=0;
	virtual const char * getTooltip()=0;
	virtual IArrayOf<IConstChoiceLimitType> & getChoiceList()=0;
	virtual bool getFixedChoices()=0;
};

interface IEspInsertItemType : extends IConstInsertItemType
{
	virtual void setName(const char * val)=0;
	virtual void setNodeType(const char * val)=0;
	virtual void setClass(const char * val)=0;
	virtual void setCategory(const char * val)=0;
	virtual void setRequired(bool val)=0;
	virtual void setTooltip(const char * val)=0;
	virtual void setChoiceList(IArrayOf<IEspChoiceLimitType> &val)=0;
	virtual void setChoiceList(IArrayOf<IConstChoiceLimitType> &val)=0;
	virtual void setFixedChoices(bool val)=0;
	virtual void copy(IConstInsertItemType &from)=0;
};

interface IClientInsertItemType : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setNodeType(const char * val)=0;
	virtual void setClass(const char * val)=0;
	virtual void setCategory(const char * val)=0;
	virtual void setRequired(bool val)=0;
	virtual void setTooltip(const char * val)=0;
	virtual void setChoiceList(IArrayOf<IEspChoiceLimitType> &val)=0;
	virtual void setChoiceList(IArrayOf<IConstChoiceLimitType> &val)=0;
	virtual void setFixedChoices(bool val)=0;
	virtual const char * getName()=0;
	virtual const char * getNodeType()=0;
	virtual const char * getClass()=0;
	virtual const char * getCategory()=0;
	virtual bool getRequired()=0;
	virtual const char * getTooltip()=0;
	virtual IArrayOf<IConstChoiceLimitType> & getChoiceList()=0;
	virtual bool getFixedChoices()=0;
};




interface IConstAttributeType : extends IEspStruct
{
	virtual const char * getDisplayName()=0;
	virtual const char * getName()=0;
	virtual unsigned int getOrdinal()=0;
	virtual const char * getGroup()=0;
	virtual const char * getTooltip()=0;
	virtual IConstTypeInfo & getType()=0;
	virtual const char * getCurrentValue()=0;
	virtual const char * getForcedValue()=0;
	virtual bool getIsPresentInEnvironment()=0;
	virtual const char * getPresetValue()=0;
	virtual bool getRequired()=0;
	virtual bool getReadOnly()=0;
	virtual bool getHidden()=0;
	virtual bool getDeprecated()=0;
	virtual StringArray & getModifiers()=0;
};

interface IEspAttributeType : extends IConstAttributeType
{
	virtual void setDisplayName(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setOrdinal(unsigned int val)=0;
	virtual void setGroup(const char * val)=0;
	virtual void setTooltip(const char * val)=0;
	virtual IEspTypeInfo & updateType()=0;
	virtual void setType(IConstTypeInfo &ifrom)=0;
	virtual void setCurrentValue(const char * val)=0;
	virtual void setForcedValue(const char * val)=0;
	virtual void setIsPresentInEnvironment(bool val)=0;
	virtual void setPresetValue(const char * val)=0;
	virtual void setRequired(bool val)=0;
	virtual void setReadOnly(bool val)=0;
	virtual void setHidden(bool val)=0;
	virtual void setDeprecated(bool val)=0;
	virtual void setModifiers(StringArray &val)=0;
	virtual void copy(IConstAttributeType &from)=0;
};

interface IClientAttributeType : extends IInterface
{
	virtual void setDisplayName(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void setOrdinal(unsigned int val)=0;
	virtual void setGroup(const char * val)=0;
	virtual void setTooltip(const char * val)=0;
	virtual IEspTypeInfo & updateType()=0;
	virtual void setType(IConstTypeInfo &ifrom)=0;
	virtual void setCurrentValue(const char * val)=0;
	virtual void setForcedValue(const char * val)=0;
	virtual void setIsPresentInEnvironment(bool val)=0;
	virtual void setPresetValue(const char * val)=0;
	virtual void setRequired(bool val)=0;
	virtual void setReadOnly(bool val)=0;
	virtual void setHidden(bool val)=0;
	virtual void setDeprecated(bool val)=0;
	virtual void setModifiers(StringArray &val)=0;
	virtual const char * getDisplayName()=0;
	virtual const char * getName()=0;
	virtual unsigned int getOrdinal()=0;
	virtual const char * getGroup()=0;
	virtual const char * getTooltip()=0;
	virtual IConstTypeInfo & getType()=0;
	virtual const char * getCurrentValue()=0;
	virtual const char * getForcedValue()=0;
	virtual bool getIsPresentInEnvironment()=0;
	virtual const char * getPresetValue()=0;
	virtual bool getRequired()=0;
	virtual bool getReadOnly()=0;
	virtual bool getHidden()=0;
	virtual bool getDeprecated()=0;
	virtual StringArray & getModifiers()=0;
};




interface IConstAttributeValueType : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getValue()=0;
};

interface IEspAttributeValueType : extends IConstAttributeValueType
{
	virtual void setName(const char * val)=0;
	virtual void setValue(const char * val)=0;
	virtual void copy(IConstAttributeValueType &from)=0;
};

interface IClientAttributeValueType : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setValue(const char * val)=0;
	virtual const char * getName()=0;
	virtual const char * getValue()=0;
};




interface IConstGetNodeResponse : extends IEspResponse
{
	virtual const char * getNodeId()=0;
	virtual IConstNodeInfoType & getNodeInfo()=0;
	virtual IArrayOf<IConstAttributeType> & getAttributes()=0;
	virtual IArrayOf<IConstNode> & getChildren()=0;
	virtual IArrayOf<IConstInsertItemType> & getInsertable()=0;
	virtual IConstStatusType & getStatus()=0;
	virtual bool getLocalValueDefined()=0;
	virtual IConstAttributeType & getValue()=0;
};

interface IEspGetNodeResponse : extends IConstGetNodeResponse
{
	virtual void setNodeId(const char * val)=0;
	virtual IEspNodeInfoType & updateNodeInfo()=0;
	virtual void setNodeInfo(IConstNodeInfoType &ifrom)=0;
	virtual void setAttributes(IArrayOf<IEspAttributeType> &val)=0;
	virtual void setAttributes(IArrayOf<IConstAttributeType> &val)=0;
	virtual void setChildren(IArrayOf<IEspNode> &val)=0;
	virtual void setChildren(IArrayOf<IConstNode> &val)=0;
	virtual void setInsertable(IArrayOf<IEspInsertItemType> &val)=0;
	virtual void setInsertable(IArrayOf<IConstInsertItemType> &val)=0;
	virtual IEspStatusType & updateStatus()=0;
	virtual void setStatus(IConstStatusType &ifrom)=0;
	virtual void setLocalValueDefined(bool val)=0;
	virtual IEspAttributeType & updateValue()=0;
	virtual void setValue(IConstAttributeType &ifrom)=0;
	virtual void copy(IConstGetNodeResponse &from)=0;
};

interface IClientGetNodeResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getNodeId()=0;
	virtual IConstNodeInfoType & getNodeInfo()=0;
	virtual IArrayOf<IConstAttributeType> & getAttributes()=0;
	virtual IArrayOf<IConstNode> & getChildren()=0;
	virtual IArrayOf<IConstInsertItemType> & getInsertable()=0;
	virtual IConstStatusType & getStatus()=0;
	virtual bool getLocalValueDefined()=0;
	virtual IConstAttributeType & getValue()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstInsertNodeRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getSessionLockKey()=0;
	virtual const char * getParentNodeId()=0;
	virtual const char * getNodeType()=0;
	virtual IArrayOf<IConstAttributeValueType> & getAttributeValues()=0;
	virtual bool getAllowInvalid()=0;
	virtual bool getForceCreate()=0;
	virtual const char * getLocalValue()=0;
};

interface IEspInsertNodeRequest : extends IConstInsertNodeRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setParentNodeId(const char * val)=0;
	virtual void setNodeType(const char * val)=0;
	virtual void setAttributeValues(IArrayOf<IEspAttributeValueType> &val)=0;
	virtual void setAttributeValues(IArrayOf<IConstAttributeValueType> &val)=0;
	virtual void setAllowInvalid(bool val)=0;
	virtual void setForceCreate(bool val)=0;
	virtual void setLocalValue(const char * val)=0;
	virtual void copy(IConstInsertNodeRequest &from)=0;
};

interface IClientInsertNodeRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setParentNodeId(const char * val)=0;
	virtual void setNodeType(const char * val)=0;
	virtual void setAttributeValues(IArrayOf<IEspAttributeValueType> &val)=0;
	virtual void setAttributeValues(IArrayOf<IConstAttributeValueType> &val)=0;
	virtual void setAllowInvalid(bool val)=0;
	virtual void setForceCreate(bool val)=0;
	virtual void setLocalValue(const char * val)=0;
};




interface IConstGetCreateNodeInfoRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getParentNodeId()=0;
	virtual const char * getNodeType()=0;
};

interface IEspGetCreateNodeInfoRequest : extends IConstGetCreateNodeInfoRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setParentNodeId(const char * val)=0;
	virtual void setNodeType(const char * val)=0;
	virtual void copy(IConstGetCreateNodeInfoRequest &from)=0;
};

interface IClientGetCreateNodeInfoRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setParentNodeId(const char * val)=0;
	virtual void setNodeType(const char * val)=0;
};




interface IConstGetCreateNodeInfoResponse : extends IEspResponse
{
	virtual IConstNodeInfoType & getNodeInfo()=0;
	virtual IArrayOf<IConstAttributeType> & getAttributes()=0;
	virtual bool getLocalValueDefined()=0;
	virtual IConstAttributeType & getValue()=0;
};

interface IEspGetCreateNodeInfoResponse : extends IConstGetCreateNodeInfoResponse
{
	virtual IEspNodeInfoType & updateNodeInfo()=0;
	virtual void setNodeInfo(IConstNodeInfoType &ifrom)=0;
	virtual void setAttributes(IArrayOf<IEspAttributeType> &val)=0;
	virtual void setAttributes(IArrayOf<IConstAttributeType> &val)=0;
	virtual void setLocalValueDefined(bool val)=0;
	virtual IEspAttributeType & updateValue()=0;
	virtual void setValue(IConstAttributeType &ifrom)=0;
	virtual void copy(IConstGetCreateNodeInfoResponse &from)=0;
};

interface IClientGetCreateNodeInfoResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstNodeInfoType & getNodeInfo()=0;
	virtual IArrayOf<IConstAttributeType> & getAttributes()=0;
	virtual bool getLocalValueDefined()=0;
	virtual IConstAttributeType & getValue()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstSetValuesRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getSessionLockKey()=0;
	virtual const char * getNodeId()=0;
	virtual IArrayOf<IConstAttributeValueType> & getAttributeValues()=0;
	virtual bool getAllowInvalid()=0;
	virtual bool getForceCreate()=0;
	virtual const char * getLocalValue()=0;
};

interface IEspSetValuesRequest : extends IConstSetValuesRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
	virtual void setAttributeValues(IArrayOf<IEspAttributeValueType> &val)=0;
	virtual void setAttributeValues(IArrayOf<IConstAttributeValueType> &val)=0;
	virtual void setAllowInvalid(bool val)=0;
	virtual void setForceCreate(bool val)=0;
	virtual void setLocalValue(const char * val)=0;
	virtual void copy(IConstSetValuesRequest &from)=0;
};

interface IClientSetValuesRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
	virtual void setAttributeValues(IArrayOf<IEspAttributeValueType> &val)=0;
	virtual void setAttributeValues(IArrayOf<IConstAttributeValueType> &val)=0;
	virtual void setAllowInvalid(bool val)=0;
	virtual void setForceCreate(bool val)=0;
	virtual void setLocalValue(const char * val)=0;
};




interface IConstGetParentsResponse : extends IEspResponse
{
	virtual StringArray & getParentIdList()=0;
};

interface IEspGetParentsResponse : extends IConstGetParentsResponse
{
	virtual void setParentIdList(StringArray &val)=0;
	virtual void copy(IConstGetParentsResponse &from)=0;
};

interface IClientGetParentsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual StringArray & getParentIdList()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstGetNodeCopyRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getNodeId()=0;
};

interface IEspGetNodeCopyRequest : extends IConstGetNodeCopyRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
	virtual void copy(IConstGetNodeCopyRequest &from)=0;
};

interface IClientGetNodeCopyRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
};




interface IConstGetNodeCopyResponse : extends IEspResponse
{
	virtual const char * getValidInsertPath()=0;
	virtual const char * getNodeCopy()=0;
};

interface IEspGetNodeCopyResponse : extends IConstGetNodeCopyResponse
{
	virtual void setValidInsertPath(const char * val)=0;
	virtual void setNodeCopy(const char * val)=0;
	virtual void copy(IConstGetNodeCopyResponse &from)=0;
};

interface IClientGetNodeCopyResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getValidInsertPath()=0;
	virtual const char * getNodeCopy()=0;
};




interface IConstPasteNodeCopyRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getSessionLockKey()=0;
	virtual const char * getParentNodeId()=0;
	virtual const char * getNodeCopy()=0;
};

interface IEspPasteNodeCopyRequest : extends IConstPasteNodeCopyRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setParentNodeId(const char * val)=0;
	virtual void setNodeCopy(const char * val)=0;
	virtual void copy(IConstPasteNodeCopyRequest &from)=0;
};

interface IClientPasteNodeCopyRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setParentNodeId(const char * val)=0;
	virtual void setNodeCopy(const char * val)=0;
};




interface IConstPasteNodeCopyResponse : extends IEspResponse
{
	virtual bool getNodeInserted()=0;
	virtual IConstStatusType & getStatus()=0;
	virtual const char * getNewNodeId()=0;
};

interface IEspPasteNodeCopyResponse : extends IConstPasteNodeCopyResponse
{
	virtual void setNodeInserted(bool val)=0;
	virtual IEspStatusType & updateStatus()=0;
	virtual void setStatus(IConstStatusType &ifrom)=0;
	virtual void setNewNodeId(const char * val)=0;
	virtual void copy(IConstPasteNodeCopyResponse &from)=0;
};

interface IClientPasteNodeCopyResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual bool getNodeInserted()=0;
	virtual IConstStatusType & getStatus()=0;
	virtual const char * getNewNodeId()=0;
};




//
// Environment management

interface IConstEnvironmentFileType : extends IEspStruct
{
	virtual const char * getFilename()=0;
	virtual bool getIsActive()=0;
};

interface IEspEnvironmentFileType : extends IConstEnvironmentFileType
{
	virtual void setFilename(const char * val)=0;
	virtual void setIsActive(bool val)=0;
	virtual void copy(IConstEnvironmentFileType &from)=0;
};

interface IClientEnvironmentFileType : extends IInterface
{
	virtual void setFilename(const char * val)=0;
	virtual void setIsActive(bool val)=0;
	virtual const char * getFilename()=0;
	virtual bool getIsActive()=0;
};




interface IConstGetEnvironmentFileListRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
};

interface IEspGetEnvironmentFileListRequest : extends IConstGetEnvironmentFileListRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void copy(IConstGetEnvironmentFileListRequest &from)=0;
};

interface IClientGetEnvironmentFileListRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
};




interface IConstLockSessionRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
};

interface IEspLockSessionRequest : extends IConstLockSessionRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void copy(IConstLockSessionRequest &from)=0;
};

interface IClientLockSessionRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
};




interface IConstGetEnvironmentListResponse : extends IEspResponse
{
	virtual IArrayOf<IConstEnvironmentFileType> & getEnvironmentFiles()=0;
};

interface IEspGetEnvironmentListResponse : extends IConstGetEnvironmentListResponse
{
	virtual void setEnvironmentFiles(IArrayOf<IEspEnvironmentFileType> &val)=0;
	virtual void setEnvironmentFiles(IArrayOf<IConstEnvironmentFileType> &val)=0;
	virtual void copy(IConstGetEnvironmentListResponse &from)=0;
};

interface IClientGetEnvironmentListResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstEnvironmentFileType> & getEnvironmentFiles()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstOpenEnvironmentFileRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getFilename()=0;
};

interface IEspOpenEnvironmentFileRequest : extends IConstOpenEnvironmentFileRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setFilename(const char * val)=0;
	virtual void copy(IConstOpenEnvironmentFileRequest &from)=0;
};

interface IClientOpenEnvironmentFileRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setFilename(const char * val)=0;
};




interface IConstOpenEnvironmentFileResponse : extends IEspResponse
{
	virtual const char * getRootNodeId()=0;
};

interface IEspOpenEnvironmentFileResponse : extends IConstOpenEnvironmentFileResponse
{
	virtual void setRootNodeId(const char * val)=0;
	virtual void copy(IConstOpenEnvironmentFileResponse &from)=0;
};

interface IClientOpenEnvironmentFileResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getRootNodeId()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstCloseEnvironmentFileRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getSessionLockKey()=0;
	virtual bool getDiscardChanges()=0;
};

interface IEspCloseEnvironmentFileRequest : extends IConstCloseEnvironmentFileRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setDiscardChanges(bool val)=0;
	virtual void copy(IConstCloseEnvironmentFileRequest &from)=0;
};

interface IClientCloseEnvironmentFileRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setDiscardChanges(bool val)=0;
};




interface IConstSaveEnvironmentFileRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getSessionLockKey()=0;
	virtual const char * getFilename()=0;
};

interface IEspSaveEnvironmentFileRequest : extends IConstSaveEnvironmentFileRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setFilename(const char * val)=0;
	virtual void copy(IConstSaveEnvironmentFileRequest &from)=0;
};

interface IClientSaveEnvironmentFileRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setFilename(const char * val)=0;
};




interface IConstLockSessionResponse : extends IEspResponse
{
	virtual const char * getSessionLockKey()=0;
};

interface IEspLockSessionResponse : extends IConstLockSessionResponse
{
	virtual void setSessionLockKey(const char * val)=0;
	virtual void copy(IConstLockSessionResponse &from)=0;
};

interface IClientLockSessionResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getSessionLockKey()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstUnlockSessionRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getSessionLockKey()=0;
	virtual bool getRejectIfModified()=0;
};

interface IEspUnlockSessionRequest : extends IConstUnlockSessionRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setRejectIfModified(bool val)=0;
	virtual void copy(IConstUnlockSessionRequest &from)=0;
};

interface IClientUnlockSessionRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setSessionLockKey(const char * val)=0;
	virtual void setRejectIfModified(bool val)=0;
};




interface IConstValidateEnvironmentRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual bool getIncludeHiddenNodes()=0;
};

interface IEspValidateEnvironmentRequest : extends IConstValidateEnvironmentRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setIncludeHiddenNodes(bool val)=0;
	virtual void copy(IConstValidateEnvironmentRequest &from)=0;
};

interface IClientValidateEnvironmentRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setIncludeHiddenNodes(bool val)=0;
};




interface IConstGetTreeRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getNodeId()=0;
	virtual bool getIncludeAttributes()=0;
	virtual int getNumLevels()=0;
};

interface IEspGetTreeRequest : extends IConstGetTreeRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
	virtual void setIncludeAttributes(bool val)=0;
	virtual void setNumLevels(int val)=0;
	virtual void copy(IConstGetTreeRequest &from)=0;
};

interface IClientGetTreeRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setNodeId(const char * val)=0;
	virtual void setIncludeAttributes(bool val)=0;
	virtual void setNumLevels(int val)=0;
};




interface IConstTreeElementType : extends IEspStruct
{
	virtual const char * getNodeId()=0;
	virtual IConstNodeInfoType & getNodeInfo()=0;
	virtual IArrayOf<IConstAttributeType> & getAttributes()=0;
	virtual IArrayOf<IConstTreeElementType> & getChildren()=0;
};

interface IEspTreeElementType : extends IConstTreeElementType
{
	virtual void setNodeId(const char * val)=0;
	virtual IEspNodeInfoType & updateNodeInfo()=0;
	virtual void setNodeInfo(IConstNodeInfoType &ifrom)=0;
	virtual void setAttributes(IArrayOf<IEspAttributeType> &val)=0;
	virtual void setAttributes(IArrayOf<IConstAttributeType> &val)=0;
	virtual void setChildren(IArrayOf<IEspTreeElementType> &val)=0;
	virtual void setChildren(IArrayOf<IConstTreeElementType> &val)=0;
	virtual void copy(IConstTreeElementType &from)=0;
};

interface IClientTreeElementType : extends IInterface
{
	virtual void setNodeId(const char * val)=0;
	virtual IEspNodeInfoType & updateNodeInfo()=0;
	virtual void setNodeInfo(IConstNodeInfoType &ifrom)=0;
	virtual void setAttributes(IArrayOf<IEspAttributeType> &val)=0;
	virtual void setAttributes(IArrayOf<IConstAttributeType> &val)=0;
	virtual void setChildren(IArrayOf<IEspTreeElementType> &val)=0;
	virtual void setChildren(IArrayOf<IConstTreeElementType> &val)=0;
	virtual const char * getNodeId()=0;
	virtual IConstNodeInfoType & getNodeInfo()=0;
	virtual IArrayOf<IConstAttributeType> & getAttributes()=0;
	virtual IArrayOf<IConstTreeElementType> & getChildren()=0;
};




interface IConstGetTreeResponse : extends IEspResponse
{
	virtual IConstTreeElementType & getTree()=0;
};

interface IEspGetTreeResponse : extends IConstGetTreeResponse
{
	virtual IEspTreeElementType & updateTree()=0;
	virtual void setTree(IConstTreeElementType &ifrom)=0;
	virtual void copy(IConstGetTreeResponse &from)=0;
};

interface IClientGetTreeResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstTreeElementType & getTree()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstFetchNodesRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getStartingNodeId()=0;
	virtual const char * getPath()=0;
};

interface IEspFetchNodesRequest : extends IConstFetchNodesRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setStartingNodeId(const char * val)=0;
	virtual void setPath(const char * val)=0;
	virtual void copy(IConstFetchNodesRequest &from)=0;
};

interface IClientFetchNodesRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setStartingNodeId(const char * val)=0;
	virtual void setPath(const char * val)=0;
};




interface IConstFetchNodesResponse : extends IEspResponse
{
	virtual StringArray & getNodeIds()=0;
};

interface IEspFetchNodesResponse : extends IConstFetchNodesResponse
{
	virtual void setNodeIds(StringArray &val)=0;
	virtual void copy(IConstFetchNodesResponse &from)=0;
};

interface IClientFetchNodesResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual StringArray & getNodeIds()=0;

	virtual const IMultiException& getExceptions()=0;
};




interface IConstWizardTestRequest : extends IEspRequest
{
	virtual const char * getSessionId()=0;
	virtual const char * getFqFilename()=0;
};

interface IEspWizardTestRequest : extends IConstWizardTestRequest
{
	virtual void setSessionId(const char * val)=0;
	virtual void setFqFilename(const char * val)=0;
	virtual void copy(IConstWizardTestRequest &from)=0;
};

interface IClientWizardTestRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSessionId(const char * val)=0;
	virtual void setFqFilename(const char * val)=0;
};





interface IConstws_configmgrPingRequest : extends IEspRequest
{
};

interface IEspws_configmgrPingRequest : extends IConstws_configmgrPingRequest
{
	virtual void copy(IConstws_configmgrPingRequest &from)=0;
};

interface IClientws_configmgrPingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};

interface IConstws_configmgrPingResponse : extends IEspResponse
{
};

interface IEspws_configmgrPingResponse : extends IConstws_configmgrPingResponse
{
	virtual void copy(IConstws_configmgrPingResponse &from)=0;
};

interface IClientws_configmgrPingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
};

interface IEspws_configmgr : extends IEspService
{
	virtual bool onCloseEnvironmentFile(IEspContext &context, IEspCloseEnvironmentFileRequest &req, IEspEmptyResponse &resp)=0;
	virtual bool onCloseSession(IEspContext &context, IEspCloseSessionRequest &req, IEspEmptyResponse &resp)=0;
	virtual bool onFetchNodes(IEspContext &context, IEspFetchNodesRequest &req, IEspFetchNodesResponse &resp)=0;
	virtual bool onGetCreateNodeInfo(IEspContext &context, IEspGetCreateNodeInfoRequest &req, IEspGetCreateNodeInfoResponse &resp)=0;
	virtual bool onGetEnvironmentFileList(IEspContext &context, IEspGetEnvironmentFileListRequest &req, IEspGetEnvironmentListResponse &resp)=0;
	virtual bool onGetNode(IEspContext &context, IEspGetNodeRequest &req, IEspGetNodeResponse &resp)=0;
	virtual bool onGetNodeCopy(IEspContext &context, IEspGetNodeCopyRequest &req, IEspGetNodeCopyResponse &resp)=0;
	virtual bool onGetNodeTree(IEspContext &context, IEspGetTreeRequest &req, IEspGetTreeResponse &resp)=0;
	virtual bool onGetOpenSessions(IEspContext &context, IEspListOpenSessionsRequest &req, IEspListOpenSessionsResponse &resp)=0;
	virtual bool onGetParents(IEspContext &context, IEspGetParentsRequest &req, IEspGetParentsResponse &resp)=0;
	virtual bool onInsertNode(IEspContext &context, IEspInsertNodeRequest &req, IEspGetNodeResponse &resp)=0;
	virtual bool onInsertNodeCopy(IEspContext &context, IEspPasteNodeCopyRequest &req, IEspPasteNodeCopyResponse &resp)=0;
	virtual bool onLockSession(IEspContext &context, IEspLockSessionRequest &req, IEspLockSessionResponse &resp)=0;
	virtual bool onOpenEnvironmentFile(IEspContext &context, IEspOpenEnvironmentFileRequest &req, IEspOpenEnvironmentFileResponse &resp)=0;
	virtual bool onOpenSession(IEspContext &context, IEspOpenSessionRequest &req, IEspOpenSessionResponse &resp)=0;
	virtual bool onPing(IEspContext &context, IEspws_configmgrPingRequest &req, IEspws_configmgrPingResponse &resp)=0;
	virtual bool onRemoveNode(IEspContext &context, IEspRemoveNodeRequest &req, IEspStatusResponse &resp)=0;
	virtual bool onSaveEnvironmentFile(IEspContext &context, IEspSaveEnvironmentFileRequest &req, IEspEmptyResponse &resp)=0;
	virtual bool onSetValues(IEspContext &context, IEspSetValuesRequest &req, IEspStatusResponse &resp)=0;
	virtual bool onUnlockSession(IEspContext &context, IEspUnlockSessionRequest &req, IEspEmptyResponse &resp)=0;
	virtual bool onValidateEnvironment(IEspContext &context, IEspValidateEnvironmentRequest &req, IEspStatusResponse &resp)=0;
};

interface IClientws_configmgrEvents : extends IInterface
{
	virtual int onCloseEnvironmentFileComplete(IClientEmptyResponse *resp,IInterface* state)=0;
	virtual int onCloseEnvironmentFileError(IClientEmptyResponse *resp,IInterface* state)=0;
	virtual int onCloseSessionComplete(IClientEmptyResponse *resp,IInterface* state)=0;
	virtual int onCloseSessionError(IClientEmptyResponse *resp,IInterface* state)=0;
	virtual int onFetchNodesComplete(IClientFetchNodesResponse *resp,IInterface* state)=0;
	virtual int onFetchNodesError(IClientFetchNodesResponse *resp,IInterface* state)=0;
	virtual int onGetCreateNodeInfoComplete(IClientGetCreateNodeInfoResponse *resp,IInterface* state)=0;
	virtual int onGetCreateNodeInfoError(IClientGetCreateNodeInfoResponse *resp,IInterface* state)=0;
	virtual int onGetEnvironmentFileListComplete(IClientGetEnvironmentListResponse *resp,IInterface* state)=0;
	virtual int onGetEnvironmentFileListError(IClientGetEnvironmentListResponse *resp,IInterface* state)=0;
	virtual int onGetNodeComplete(IClientGetNodeResponse *resp,IInterface* state)=0;
	virtual int onGetNodeError(IClientGetNodeResponse *resp,IInterface* state)=0;
	virtual int onGetNodeCopyComplete(IClientGetNodeCopyResponse *resp,IInterface* state)=0;
	virtual int onGetNodeCopyError(IClientGetNodeCopyResponse *resp,IInterface* state)=0;
	virtual int onGetNodeTreeComplete(IClientGetTreeResponse *resp,IInterface* state)=0;
	virtual int onGetNodeTreeError(IClientGetTreeResponse *resp,IInterface* state)=0;
	virtual int onGetOpenSessionsComplete(IClientListOpenSessionsResponse *resp,IInterface* state)=0;
	virtual int onGetOpenSessionsError(IClientListOpenSessionsResponse *resp,IInterface* state)=0;
	virtual int onGetParentsComplete(IClientGetParentsResponse *resp,IInterface* state)=0;
	virtual int onGetParentsError(IClientGetParentsResponse *resp,IInterface* state)=0;
	virtual int onInsertNodeComplete(IClientGetNodeResponse *resp,IInterface* state)=0;
	virtual int onInsertNodeError(IClientGetNodeResponse *resp,IInterface* state)=0;
	virtual int onInsertNodeCopyComplete(IClientPasteNodeCopyResponse *resp,IInterface* state)=0;
	virtual int onInsertNodeCopyError(IClientPasteNodeCopyResponse *resp,IInterface* state)=0;
	virtual int onLockSessionComplete(IClientLockSessionResponse *resp,IInterface* state)=0;
	virtual int onLockSessionError(IClientLockSessionResponse *resp,IInterface* state)=0;
	virtual int onOpenEnvironmentFileComplete(IClientOpenEnvironmentFileResponse *resp,IInterface* state)=0;
	virtual int onOpenEnvironmentFileError(IClientOpenEnvironmentFileResponse *resp,IInterface* state)=0;
	virtual int onOpenSessionComplete(IClientOpenSessionResponse *resp,IInterface* state)=0;
	virtual int onOpenSessionError(IClientOpenSessionResponse *resp,IInterface* state)=0;
	virtual int onPingComplete(IClientws_configmgrPingResponse *resp,IInterface* state)=0;
	virtual int onPingError(IClientws_configmgrPingResponse *resp,IInterface* state)=0;
	virtual int onRemoveNodeComplete(IClientStatusResponse *resp,IInterface* state)=0;
	virtual int onRemoveNodeError(IClientStatusResponse *resp,IInterface* state)=0;
	virtual int onSaveEnvironmentFileComplete(IClientEmptyResponse *resp,IInterface* state)=0;
	virtual int onSaveEnvironmentFileError(IClientEmptyResponse *resp,IInterface* state)=0;
	virtual int onSetValuesComplete(IClientStatusResponse *resp,IInterface* state)=0;
	virtual int onSetValuesError(IClientStatusResponse *resp,IInterface* state)=0;
	virtual int onUnlockSessionComplete(IClientEmptyResponse *resp,IInterface* state)=0;
	virtual int onUnlockSessionError(IClientEmptyResponse *resp,IInterface* state)=0;
	virtual int onValidateEnvironmentComplete(IClientStatusResponse *resp,IInterface* state)=0;
	virtual int onValidateEnvironmentError(IClientStatusResponse *resp,IInterface* state)=0;
};

interface IClientws_configmgr : extends IInterface
{
	virtual void setProxyAddress(const char *address)=0;
	virtual void addServiceUrl(const char *url)=0;
	virtual void removeServiceUrl(const char *url)=0;
	virtual void setUsernameToken(const char *userName,const char *passWord,const char *realm)=0;
	virtual void setAction(const char *action)=0;

	virtual IClientCloseEnvironmentFileRequest * createCloseEnvironmentFileRequest()=0;
	virtual IClientEmptyResponse * CloseEnvironmentFile(IClientCloseEnvironmentFileRequest *request)=0;
	virtual void async_CloseEnvironmentFile(IClientCloseEnvironmentFileRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientCloseSessionRequest * createCloseSessionRequest()=0;
	virtual IClientEmptyResponse * CloseSession(IClientCloseSessionRequest *request)=0;
	virtual void async_CloseSession(IClientCloseSessionRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientFetchNodesRequest * createFetchNodesRequest()=0;
	virtual IClientFetchNodesResponse * FetchNodes(IClientFetchNodesRequest *request)=0;
	virtual void async_FetchNodes(IClientFetchNodesRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientGetCreateNodeInfoRequest * createGetCreateNodeInfoRequest()=0;
	virtual IClientGetCreateNodeInfoResponse * GetCreateNodeInfo(IClientGetCreateNodeInfoRequest *request)=0;
	virtual void async_GetCreateNodeInfo(IClientGetCreateNodeInfoRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientGetEnvironmentFileListRequest * createGetEnvironmentFileListRequest()=0;
	virtual IClientGetEnvironmentListResponse * GetEnvironmentFileList(IClientGetEnvironmentFileListRequest *request)=0;
	virtual void async_GetEnvironmentFileList(IClientGetEnvironmentFileListRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientGetNodeRequest * createGetNodeRequest()=0;
	virtual IClientGetNodeResponse * GetNode(IClientGetNodeRequest *request)=0;
	virtual void async_GetNode(IClientGetNodeRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientGetNodeCopyRequest * createGetNodeCopyRequest()=0;
	virtual IClientGetNodeCopyResponse * GetNodeCopy(IClientGetNodeCopyRequest *request)=0;
	virtual void async_GetNodeCopy(IClientGetNodeCopyRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientGetTreeRequest * createGetNodeTreeRequest()=0;
	virtual IClientGetTreeResponse * GetNodeTree(IClientGetTreeRequest *request)=0;
	virtual void async_GetNodeTree(IClientGetTreeRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientListOpenSessionsRequest * createGetOpenSessionsRequest()=0;
	virtual IClientListOpenSessionsResponse * GetOpenSessions(IClientListOpenSessionsRequest *request)=0;
	virtual void async_GetOpenSessions(IClientListOpenSessionsRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientGetParentsRequest * createGetParentsRequest()=0;
	virtual IClientGetParentsResponse * GetParents(IClientGetParentsRequest *request)=0;
	virtual void async_GetParents(IClientGetParentsRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientInsertNodeRequest * createInsertNodeRequest()=0;
	virtual IClientGetNodeResponse * InsertNode(IClientInsertNodeRequest *request)=0;
	virtual void async_InsertNode(IClientInsertNodeRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientPasteNodeCopyRequest * createInsertNodeCopyRequest()=0;
	virtual IClientPasteNodeCopyResponse * InsertNodeCopy(IClientPasteNodeCopyRequest *request)=0;
	virtual void async_InsertNodeCopy(IClientPasteNodeCopyRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientLockSessionRequest * createLockSessionRequest()=0;
	virtual IClientLockSessionResponse * LockSession(IClientLockSessionRequest *request)=0;
	virtual void async_LockSession(IClientLockSessionRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientOpenEnvironmentFileRequest * createOpenEnvironmentFileRequest()=0;
	virtual IClientOpenEnvironmentFileResponse * OpenEnvironmentFile(IClientOpenEnvironmentFileRequest *request)=0;
	virtual void async_OpenEnvironmentFile(IClientOpenEnvironmentFileRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientOpenSessionRequest * createOpenSessionRequest()=0;
	virtual IClientOpenSessionResponse * OpenSession(IClientOpenSessionRequest *request)=0;
	virtual void async_OpenSession(IClientOpenSessionRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientws_configmgrPingRequest * createPingRequest()=0;
	virtual IClientws_configmgrPingResponse * Ping(IClientws_configmgrPingRequest *request)=0;
	virtual void async_Ping(IClientws_configmgrPingRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientRemoveNodeRequest * createRemoveNodeRequest()=0;
	virtual IClientStatusResponse * RemoveNode(IClientRemoveNodeRequest *request)=0;
	virtual void async_RemoveNode(IClientRemoveNodeRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientSaveEnvironmentFileRequest * createSaveEnvironmentFileRequest()=0;
	virtual IClientEmptyResponse * SaveEnvironmentFile(IClientSaveEnvironmentFileRequest *request)=0;
	virtual void async_SaveEnvironmentFile(IClientSaveEnvironmentFileRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientSetValuesRequest * createSetValuesRequest()=0;
	virtual IClientStatusResponse * SetValues(IClientSetValuesRequest *request)=0;
	virtual void async_SetValues(IClientSetValuesRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientUnlockSessionRequest * createUnlockSessionRequest()=0;
	virtual IClientEmptyResponse * UnlockSession(IClientUnlockSessionRequest *request)=0;
	virtual void async_UnlockSession(IClientUnlockSessionRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;

	virtual IClientValidateEnvironmentRequest * createValidateEnvironmentRequest()=0;
	virtual IClientStatusResponse * ValidateEnvironment(IClientValidateEnvironmentRequest *request)=0;
	virtual void async_ValidateEnvironment(IClientValidateEnvironmentRequest *request, IClientws_configmgrEvents *events,IInterface* state=0)=0;


	virtual IClientEmptyResponse *CloseEnvironmentFileFn(const char * SessionId_, const char * SessionLockKey_, bool DiscardChanges_)=0;

	virtual IClientEmptyResponse *CloseSessionFn(const char * SessionId_, bool ForceClose_)=0;

	virtual IClientFetchNodesResponse *FetchNodesFn(const char * SessionId_, const char * StartingNodeId_, const char * Path_)=0;

	virtual IClientGetCreateNodeInfoResponse *GetCreateNodeInfoFn(const char * SessionId_, const char * ParentNodeId_, const char * NodeType_)=0;

	virtual IClientGetEnvironmentListResponse *GetEnvironmentFileListFn(const char * SessionId_)=0;

	virtual IClientGetNodeResponse *GetNodeFn(const char * SessionId_, const char * NodeId_)=0;

	virtual IClientGetNodeCopyResponse *GetNodeCopyFn(const char * SessionId_, const char * NodeId_)=0;

	virtual IClientGetTreeResponse *GetNodeTreeFn(const char * SessionId_, const char * NodeId_, bool IncludeAttributes_, int NumLevels_)=0;

	virtual IClientListOpenSessionsResponse *GetOpenSessionsFn()=0;

	virtual IClientGetParentsResponse *GetParentsFn(const char * SessionId_, const char * NodeId_)=0;

	virtual IClientGetNodeResponse *InsertNodeFn(const char * SessionId_, const char * SessionLockKey_, const char * ParentNodeId_, const char * NodeType_, IArrayOf<IConstAttributeValueType> &AttributeValues_, bool AllowInvalid_, bool ForceCreate_, const char * LocalValue_)=0;

	virtual IClientPasteNodeCopyResponse *InsertNodeCopyFn(const char * SessionId_, const char * SessionLockKey_, const char * ParentNodeId_, const char * NodeCopy_)=0;

	virtual IClientLockSessionResponse *LockSessionFn(const char * SessionId_)=0;

	virtual IClientOpenEnvironmentFileResponse *OpenEnvironmentFileFn(const char * SessionId_, const char * Filename_)=0;

	virtual IClientOpenSessionResponse *OpenSessionFn(const char * Username_, const char * SchemaPath_, const char * MasterSchemaFile_, const char * SourcePath_, const char * ActivePath_, const char * PluginPaths_)=0;

	virtual IClientws_configmgrPingResponse *PingFn()=0;

	virtual IClientStatusResponse *RemoveNodeFn(const char * SessionId_, const char * SessionLockKey_, const char * NodeId_)=0;

	virtual IClientEmptyResponse *SaveEnvironmentFileFn(const char * SessionId_, const char * SessionLockKey_, const char * Filename_)=0;

	virtual IClientStatusResponse *SetValuesFn(const char * SessionId_, const char * SessionLockKey_, const char * NodeId_, IArrayOf<IConstAttributeValueType> &AttributeValues_, bool AllowInvalid_, bool ForceCreate_, const char * LocalValue_)=0;

	virtual IClientEmptyResponse *UnlockSessionFn(const char * SessionId_, const char * SessionLockKey_, bool RejectIfModified_)=0;

	virtual IClientStatusResponse *ValidateEnvironmentFn(const char * SessionId_, bool IncludeHiddenNodes_)=0;
};




#ifndef ws_configmgr_API
#define ws_configmgr_API
#endif //ws_configmgr_API



extern "C" ws_configmgr_API IClientws_configmgr * createws_configmgrClient();


extern "C"  IEspStatusMsgType *createStatusMsgType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientStatusMsgType *createClientStatusMsgType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspStatusType *createStatusType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientStatusType *createClientStatusType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspEmptyResponse *createEmptyResponse(const char *serv=NULL);
extern "C"  IClientEmptyResponse *createClientEmptyResponse(const char *serv=NULL);
extern "C"  IEspStatusResponse *createStatusResponse(const char *serv=NULL);
extern "C"  IClientStatusResponse *createClientStatusResponse(const char *serv=NULL);
extern "C"  IEspOpenSessionRequest *createOpenSessionRequest(const char *serv=NULL);
extern "C"  IClientOpenSessionRequest *createClientOpenSessionRequest(const char *serv=NULL);
extern "C"  IEspOpenSessionResponse *createOpenSessionResponse(const char *serv=NULL);
extern "C"  IClientOpenSessionResponse *createClientOpenSessionResponse(const char *serv=NULL);
extern "C"  IEspCloseSessionRequest *createCloseSessionRequest(const char *serv=NULL);
extern "C"  IClientCloseSessionRequest *createClientCloseSessionRequest(const char *serv=NULL);
extern "C"  IEspListOpenSessionsRequest *createListOpenSessionsRequest(const char *serv=NULL);
extern "C"  IClientListOpenSessionsRequest *createClientListOpenSessionsRequest(const char *serv=NULL);
extern "C"  IEspOpenSessionInfo *createOpenSessionInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientOpenSessionInfo *createClientOpenSessionInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspListOpenSessionsResponse *createListOpenSessionsResponse(const char *serv=NULL);
extern "C"  IClientListOpenSessionsResponse *createClientListOpenSessionsResponse(const char *serv=NULL);
extern "C"  IEspGetNodeRequest *createGetNodeRequest(const char *serv=NULL);
extern "C"  IClientGetNodeRequest *createClientGetNodeRequest(const char *serv=NULL);
extern "C"  IEspGetParentsRequest *createGetParentsRequest(const char *serv=NULL);
extern "C"  IClientGetParentsRequest *createClientGetParentsRequest(const char *serv=NULL);
extern "C"  IEspRemoveNodeRequest *createRemoveNodeRequest(const char *serv=NULL);
extern "C"  IClientRemoveNodeRequest *createClientRemoveNodeRequest(const char *serv=NULL);
extern "C"  IEspDependentValueType *createDependentValueType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDependentValueType *createClientDependentValueType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspChoiceType *createChoiceType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientChoiceType *createClientChoiceType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspLimitsType *createLimitsType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientLimitsType *createClientLimitsType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspTypeInfo *createTypeInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTypeInfo *createClientTypeInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspNodeInfoType *createNodeInfoType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientNodeInfoType *createClientNodeInfoType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspNode *createNode(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientNode *createClientNode(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspChoiceLimitType *createChoiceLimitType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientChoiceLimitType *createClientChoiceLimitType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspInsertItemType *createInsertItemType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientInsertItemType *createClientInsertItemType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspAttributeType *createAttributeType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientAttributeType *createClientAttributeType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspAttributeValueType *createAttributeValueType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientAttributeValueType *createClientAttributeValueType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspGetNodeResponse *createGetNodeResponse(const char *serv=NULL);
extern "C"  IClientGetNodeResponse *createClientGetNodeResponse(const char *serv=NULL);
extern "C"  IEspInsertNodeRequest *createInsertNodeRequest(const char *serv=NULL);
extern "C"  IClientInsertNodeRequest *createClientInsertNodeRequest(const char *serv=NULL);
extern "C"  IEspGetCreateNodeInfoRequest *createGetCreateNodeInfoRequest(const char *serv=NULL);
extern "C"  IClientGetCreateNodeInfoRequest *createClientGetCreateNodeInfoRequest(const char *serv=NULL);
extern "C"  IEspGetCreateNodeInfoResponse *createGetCreateNodeInfoResponse(const char *serv=NULL);
extern "C"  IClientGetCreateNodeInfoResponse *createClientGetCreateNodeInfoResponse(const char *serv=NULL);
extern "C"  IEspSetValuesRequest *createSetValuesRequest(const char *serv=NULL);
extern "C"  IClientSetValuesRequest *createClientSetValuesRequest(const char *serv=NULL);
extern "C"  IEspGetParentsResponse *createGetParentsResponse(const char *serv=NULL);
extern "C"  IClientGetParentsResponse *createClientGetParentsResponse(const char *serv=NULL);
extern "C"  IEspGetNodeCopyRequest *createGetNodeCopyRequest(const char *serv=NULL);
extern "C"  IClientGetNodeCopyRequest *createClientGetNodeCopyRequest(const char *serv=NULL);
extern "C"  IEspGetNodeCopyResponse *createGetNodeCopyResponse(const char *serv=NULL);
extern "C"  IClientGetNodeCopyResponse *createClientGetNodeCopyResponse(const char *serv=NULL);
extern "C"  IEspPasteNodeCopyRequest *createPasteNodeCopyRequest(const char *serv=NULL);
extern "C"  IClientPasteNodeCopyRequest *createClientPasteNodeCopyRequest(const char *serv=NULL);
extern "C"  IEspPasteNodeCopyResponse *createPasteNodeCopyResponse(const char *serv=NULL);
extern "C"  IClientPasteNodeCopyResponse *createClientPasteNodeCopyResponse(const char *serv=NULL);
extern "C"  IEspEnvironmentFileType *createEnvironmentFileType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientEnvironmentFileType *createClientEnvironmentFileType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspGetEnvironmentFileListRequest *createGetEnvironmentFileListRequest(const char *serv=NULL);
extern "C"  IClientGetEnvironmentFileListRequest *createClientGetEnvironmentFileListRequest(const char *serv=NULL);
extern "C"  IEspLockSessionRequest *createLockSessionRequest(const char *serv=NULL);
extern "C"  IClientLockSessionRequest *createClientLockSessionRequest(const char *serv=NULL);
extern "C"  IEspGetEnvironmentListResponse *createGetEnvironmentListResponse(const char *serv=NULL);
extern "C"  IClientGetEnvironmentListResponse *createClientGetEnvironmentListResponse(const char *serv=NULL);
extern "C"  IEspOpenEnvironmentFileRequest *createOpenEnvironmentFileRequest(const char *serv=NULL);
extern "C"  IClientOpenEnvironmentFileRequest *createClientOpenEnvironmentFileRequest(const char *serv=NULL);
extern "C"  IEspOpenEnvironmentFileResponse *createOpenEnvironmentFileResponse(const char *serv=NULL);
extern "C"  IClientOpenEnvironmentFileResponse *createClientOpenEnvironmentFileResponse(const char *serv=NULL);
extern "C"  IEspCloseEnvironmentFileRequest *createCloseEnvironmentFileRequest(const char *serv=NULL);
extern "C"  IClientCloseEnvironmentFileRequest *createClientCloseEnvironmentFileRequest(const char *serv=NULL);
extern "C"  IEspSaveEnvironmentFileRequest *createSaveEnvironmentFileRequest(const char *serv=NULL);
extern "C"  IClientSaveEnvironmentFileRequest *createClientSaveEnvironmentFileRequest(const char *serv=NULL);
extern "C"  IEspLockSessionResponse *createLockSessionResponse(const char *serv=NULL);
extern "C"  IClientLockSessionResponse *createClientLockSessionResponse(const char *serv=NULL);
extern "C"  IEspUnlockSessionRequest *createUnlockSessionRequest(const char *serv=NULL);
extern "C"  IClientUnlockSessionRequest *createClientUnlockSessionRequest(const char *serv=NULL);
extern "C"  IEspValidateEnvironmentRequest *createValidateEnvironmentRequest(const char *serv=NULL);
extern "C"  IClientValidateEnvironmentRequest *createClientValidateEnvironmentRequest(const char *serv=NULL);
extern "C"  IEspGetTreeRequest *createGetTreeRequest(const char *serv=NULL);
extern "C"  IClientGetTreeRequest *createClientGetTreeRequest(const char *serv=NULL);
extern "C"  IEspTreeElementType *createTreeElementType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientTreeElementType *createClientTreeElementType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspGetTreeResponse *createGetTreeResponse(const char *serv=NULL);
extern "C"  IClientGetTreeResponse *createClientGetTreeResponse(const char *serv=NULL);
extern "C"  IEspFetchNodesRequest *createFetchNodesRequest(const char *serv=NULL);
extern "C"  IClientFetchNodesRequest *createClientFetchNodesRequest(const char *serv=NULL);
extern "C"  IEspFetchNodesResponse *createFetchNodesResponse(const char *serv=NULL);
extern "C"  IClientFetchNodesResponse *createClientFetchNodesResponse(const char *serv=NULL);
extern "C"  IEspWizardTestRequest *createWizardTestRequest(const char *serv=NULL);
extern "C"  IClientWizardTestRequest *createClientWizardTestRequest(const char *serv=NULL);
extern "C"  IEspws_configmgrPingRequest *createws_configmgrPingRequest(const char *serv=NULL);
extern "C"  IClientws_configmgrPingRequest *createClientws_configmgrPingRequest(const char *serv=NULL);
extern "C"  IEspws_configmgrPingResponse *createws_configmgrPingResponse(const char *serv=NULL);
extern "C"  IClientws_configmgrPingResponse *createClientws_configmgrPingResponse(const char *serv=NULL);

#endif // _ws_configmgr_SCM_INCL
//end
