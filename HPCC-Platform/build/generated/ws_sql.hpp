// *** Include file generated by HIDL Version 1.3 from ws_sql.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_sql_SCM_INCL
#define ws_sql_SCM_INCL

#include "esp.hpp"



#include "ws_workunits_esp.ipp"
#include "ws_topology_esp.ipp"

interface IConstHPCCColumn : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getType()=0;
};

interface IEspHPCCColumn : extends IConstHPCCColumn
{
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual void copy(IConstHPCCColumn &from)=0;
};

interface IClientHPCCColumn : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setType(const char * val)=0;
	virtual const char * getName()=0;
	virtual const char * getType()=0;
};



interface IConstHPCCTable : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual IArrayOf<IConstHPCCColumn> & getColumns()=0;
	virtual const char * getECL()=0;
	virtual const char * getFormat()=0;
	virtual const char * getContentType()=0;
	virtual const char * getDescription()=0;
	virtual bool getIsKeyed()=0;
	virtual bool getIsSuper()=0;
	virtual const char * getCsvQuote()=0;
	virtual const char * getCsvSeparate()=0;
	virtual const char * getCsvTerminate()=0;
	virtual const char * getGroup()=0;
	virtual int getMaxRecordSize()=0;
	virtual const char * getModified()=0;
	virtual int getNumParts()=0;
	virtual const char * getOwner()=0;
};

interface IEspHPCCTable : extends IConstHPCCTable
{
	virtual void setName(const char * val)=0;
	virtual void setColumns(IArrayOf<IEspHPCCColumn> &val)=0;
	virtual void setColumns(IArrayOf<IConstHPCCColumn> &val)=0;
	virtual void setECL(const char * val)=0;
	virtual void setFormat(const char * val)=0;
	virtual void setContentType(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setIsKeyed(bool val)=0;
	virtual void setIsSuper(bool val)=0;
	virtual void setCsvQuote(const char * val)=0;
	virtual void setCsvSeparate(const char * val)=0;
	virtual void setCsvTerminate(const char * val)=0;
	virtual void setGroup(const char * val)=0;
	virtual void setMaxRecordSize(int val)=0;
	virtual void setModified(const char * val)=0;
	virtual void setNumParts(int val)=0;
	virtual void setOwner(const char * val)=0;
	virtual void copy(IConstHPCCTable &from)=0;
};

interface IClientHPCCTable : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setColumns(IArrayOf<IEspHPCCColumn> &val)=0;
	virtual void setColumns(IArrayOf<IConstHPCCColumn> &val)=0;
	virtual void setECL(const char * val)=0;
	virtual void setFormat(const char * val)=0;
	virtual void setContentType(const char * val)=0;
	virtual void setDescription(const char * val)=0;
	virtual void setIsKeyed(bool val)=0;
	virtual void setIsSuper(bool val)=0;
	virtual void setCsvQuote(const char * val)=0;
	virtual void setCsvSeparate(const char * val)=0;
	virtual void setCsvTerminate(const char * val)=0;
	virtual void setGroup(const char * val)=0;
	virtual void setMaxRecordSize(int val)=0;
	virtual void setModified(const char * val)=0;
	virtual void setNumParts(int val)=0;
	virtual void setOwner(const char * val)=0;
	virtual const char * getName()=0;
	virtual IArrayOf<IConstHPCCColumn> & getColumns()=0;
	virtual const char * getECL()=0;
	virtual const char * getFormat()=0;
	virtual const char * getContentType()=0;
	virtual const char * getDescription()=0;
	virtual bool getIsKeyed()=0;
	virtual bool getIsSuper()=0;
	virtual const char * getCsvQuote()=0;
	virtual const char * getCsvSeparate()=0;
	virtual const char * getCsvTerminate()=0;
	virtual const char * getGroup()=0;
	virtual int getMaxRecordSize()=0;
	virtual const char * getModified()=0;
	virtual int getNumParts()=0;
	virtual const char * getOwner()=0;
};



interface IConstOutputDataset : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual IArrayOf<IConstHPCCColumn> & getOutParams()=0;
};

interface IEspOutputDataset : extends IConstOutputDataset
{
	virtual void setName(const char * val)=0;
	virtual void setOutParams(IArrayOf<IEspHPCCColumn> &val)=0;
	virtual void setOutParams(IArrayOf<IConstHPCCColumn> &val)=0;
	virtual void copy(IConstOutputDataset &from)=0;
};

interface IClientOutputDataset : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setOutParams(IArrayOf<IEspHPCCColumn> &val)=0;
	virtual void setOutParams(IArrayOf<IConstHPCCColumn> &val)=0;
	virtual const char * getName()=0;
	virtual IArrayOf<IConstHPCCColumn> & getOutParams()=0;
};


interface IConstQuerySignature : extends IEspStruct
{
	virtual IArrayOf<IConstHPCCColumn> & getInParams()=0;
	virtual IArrayOf<IConstOutputDataset> & getResultSets()=0;
};

interface IEspQuerySignature : extends IConstQuerySignature
{
	virtual void setInParams(IArrayOf<IEspHPCCColumn> &val)=0;
	virtual void setInParams(IArrayOf<IConstHPCCColumn> &val)=0;
	virtual void setResultSets(IArrayOf<IEspOutputDataset> &val)=0;
	virtual void setResultSets(IArrayOf<IConstOutputDataset> &val)=0;
	virtual void copy(IConstQuerySignature &from)=0;
};

interface IClientQuerySignature : extends IInterface
{
	virtual void setInParams(IArrayOf<IEspHPCCColumn> &val)=0;
	virtual void setInParams(IArrayOf<IConstHPCCColumn> &val)=0;
	virtual void setResultSets(IArrayOf<IEspOutputDataset> &val)=0;
	virtual void setResultSets(IArrayOf<IConstOutputDataset> &val)=0;
	virtual IArrayOf<IConstHPCCColumn> & getInParams()=0;
	virtual IArrayOf<IConstOutputDataset> & getResultSets()=0;
};



interface IConstPublishedQuery : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual const char * getId()=0;
	virtual const char * getWuid()=0;
	virtual bool getSuspended()=0;
	virtual IConstQuerySignature & getSignature()=0;
};

interface IEspPublishedQuery : extends IConstPublishedQuery
{
	virtual void setName(const char * val)=0;
	virtual void setId(const char * val)=0;
	virtual void setWuid(const char * val)=0;
	virtual void setSuspended(bool val)=0;
	virtual IEspQuerySignature & updateSignature()=0;
	virtual void setSignature(IConstQuerySignature &ifrom)=0;
	virtual void copy(IConstPublishedQuery &from)=0;
};

interface IClientPublishedQuery : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setId(const char * val)=0;
	virtual void setWuid(const char * val)=0;
	virtual void setSuspended(bool val)=0;
	virtual IEspQuerySignature & updateSignature()=0;
	virtual void setSignature(IConstQuerySignature &ifrom)=0;
	virtual const char * getName()=0;
	virtual const char * getId()=0;
	virtual const char * getWuid()=0;
	virtual bool getSuspended()=0;
	virtual IConstQuerySignature & getSignature()=0;
};



interface IConstQuerySetAliasMap : extends IEspStruct
{
	virtual const char * getId()=0;
	virtual const char * getName()=0;
};

interface IEspQuerySetAliasMap : extends IConstQuerySetAliasMap
{
	virtual void setId(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual void copy(IConstQuerySetAliasMap &from)=0;
};

interface IClientQuerySetAliasMap : extends IInterface
{
	virtual void setId(const char * val)=0;
	virtual void setName(const char * val)=0;
	virtual const char * getId()=0;
	virtual const char * getName()=0;
};



interface IConstHPCCQuerySet : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual IArrayOf<IConstPublishedQuery> & getQuerySetQueries()=0;
	virtual IArrayOf<IConstQuerySetAliasMap> & getQuerySetAliases()=0;
};

interface IEspHPCCQuerySet : extends IConstHPCCQuerySet
{
	virtual void setName(const char * val)=0;
	virtual void setQuerySetQueries(IArrayOf<IEspPublishedQuery> &val)=0;
	virtual void setQuerySetQueries(IArrayOf<IConstPublishedQuery> &val)=0;
	virtual void setQuerySetAliases(IArrayOf<IEspQuerySetAliasMap> &val)=0;
	virtual void setQuerySetAliases(IArrayOf<IConstQuerySetAliasMap> &val)=0;
	virtual void copy(IConstHPCCQuerySet &from)=0;
};

interface IClientHPCCQuerySet : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setQuerySetQueries(IArrayOf<IEspPublishedQuery> &val)=0;
	virtual void setQuerySetQueries(IArrayOf<IConstPublishedQuery> &val)=0;
	virtual void setQuerySetAliases(IArrayOf<IEspQuerySetAliasMap> &val)=0;
	virtual void setQuerySetAliases(IArrayOf<IConstQuerySetAliasMap> &val)=0;
	virtual const char * getName()=0;
	virtual IArrayOf<IConstPublishedQuery> & getQuerySetQueries()=0;
	virtual IArrayOf<IConstQuerySetAliasMap> & getQuerySetAliases()=0;
};



interface IConstHPCCTargetCluster : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual IArrayOf<IConstPublishedQuery> & getQuerySetQueries()=0;
	virtual IArrayOf<IConstQuerySetAliasMap> & getQuerySetAliases()=0;
};

interface IEspHPCCTargetCluster : extends IConstHPCCTargetCluster
{
	virtual void setName(const char * val)=0;
	virtual void setQuerySetQueries(IArrayOf<IEspPublishedQuery> &val)=0;
	virtual void setQuerySetQueries(IArrayOf<IConstPublishedQuery> &val)=0;
	virtual void setQuerySetAliases(IArrayOf<IEspQuerySetAliasMap> &val)=0;
	virtual void setQuerySetAliases(IArrayOf<IConstQuerySetAliasMap> &val)=0;
	virtual void copy(IConstHPCCTargetCluster &from)=0;
};

interface IClientHPCCTargetCluster : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setQuerySetQueries(IArrayOf<IEspPublishedQuery> &val)=0;
	virtual void setQuerySetQueries(IArrayOf<IConstPublishedQuery> &val)=0;
	virtual void setQuerySetAliases(IArrayOf<IEspQuerySetAliasMap> &val)=0;
	virtual void setQuerySetAliases(IArrayOf<IConstQuerySetAliasMap> &val)=0;
	virtual const char * getName()=0;
	virtual IArrayOf<IConstPublishedQuery> & getQuerySetQueries()=0;
	virtual IArrayOf<IConstQuerySetAliasMap> & getQuerySetAliases()=0;
};



interface IConstPrepareSQLRequest : extends IEspRequest
{
	virtual const char * getSqlText()=0;
	virtual const char * getTargetCluster()=0;
	virtual StringArray & getAlternateClusters()=0;
	virtual const char * getTargetQuerySet()=0;
	virtual int getWait()=0;
};

interface IEspPrepareSQLRequest : extends IConstPrepareSQLRequest
{
	virtual void setSqlText(const char * val)=0;
	virtual void setTargetCluster(const char * val)=0;
	virtual void setAlternateClusters(StringArray &val)=0;
	virtual void setTargetQuerySet(const char * val)=0;
	virtual void setWait(int val)=0;
	virtual void copy(IConstPrepareSQLRequest &from)=0;
};

interface IClientPrepareSQLRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSqlText(const char * val)=0;
	virtual void setTargetCluster(const char * val)=0;
	virtual void setAlternateClusters(StringArray &val)=0;
	virtual void setTargetQuerySet(const char * val)=0;
	virtual void setWait(int val)=0;
};



interface IConstPrepareSQLResponse : extends IEspResponse
{
	virtual IConstECLWorkunit & getWorkunit()=0;
	virtual const char * getResult()=0;
};

interface IEspPrepareSQLResponse : extends IConstPrepareSQLResponse
{
	virtual IEspECLWorkunit & updateWorkunit()=0;
	virtual void setWorkunit(IConstECLWorkunit &ifrom)=0;
	virtual void setResult(const char * val)=0;
	virtual void copy(IConstPrepareSQLResponse &from)=0;
};

interface IClientPrepareSQLResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IConstECLWorkunit & getWorkunit()=0;
	virtual const char * getResult()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstExecuteSQLRequest : extends IEspRequest
{
	virtual const char * getSqlText()=0;
	virtual const char * getUserName()=0;
	virtual const char * getTargetCluster()=0;
	virtual StringArray & getAlternateClusters()=0;
	virtual const char * getTargetQuerySet()=0;
	virtual bool getSuppressResults()=0;
	virtual bool getSuppressXmlSchema()=0;
	virtual int getWait()=0;
	virtual int getResultLimit()=0;
	virtual int getResultWindowStart()=0;
	virtual int getResultWindowCount()=0;
	virtual bool getIgnoreCache()=0;
};

interface IEspExecuteSQLRequest : extends IConstExecuteSQLRequest
{
	virtual void setSqlText(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setTargetCluster(const char * val)=0;
	virtual void setAlternateClusters(StringArray &val)=0;
	virtual void setTargetQuerySet(const char * val)=0;
	virtual void setSuppressResults(bool val)=0;
	virtual void setSuppressXmlSchema(bool val)=0;
	virtual void setWait(int val)=0;
	virtual void setResultLimit(int val)=0;
	virtual void setResultWindowStart(int val)=0;
	virtual void setResultWindowCount(int val)=0;
	virtual void setIgnoreCache(bool val)=0;
	virtual void copy(IConstExecuteSQLRequest &from)=0;
};

interface IClientExecuteSQLRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setSqlText(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setTargetCluster(const char * val)=0;
	virtual void setAlternateClusters(StringArray &val)=0;
	virtual void setTargetQuerySet(const char * val)=0;
	virtual void setSuppressResults(bool val)=0;
	virtual void setSuppressXmlSchema(bool val)=0;
	virtual void setWait(int val)=0;
	virtual void setResultLimit(int val)=0;
	virtual void setResultWindowStart(int val)=0;
	virtual void setResultWindowCount(int val)=0;
	virtual void setIgnoreCache(bool val)=0;
};



interface IConstExecuteSQLResponse : extends IEspResponse
{
	virtual const char * getParentWuId()=0;
	virtual const char * getResult()=0;
	virtual IConstECLWorkunit & getWorkunit()=0;
	virtual int getResultLimit()=0;
	virtual unsigned int getResultWindowStart()=0;
	virtual unsigned int getResultWindowCount()=0;
};

interface IEspExecuteSQLResponse : extends IConstExecuteSQLResponse
{
	virtual void setParentWuId(const char * val)=0;
	virtual void setResult(const char * val)=0;
	virtual IEspECLWorkunit & updateWorkunit()=0;
	virtual void setWorkunit(IConstECLWorkunit &ifrom)=0;
	virtual void setResultLimit(int val)=0;
	virtual void setResultWindowStart(unsigned int val)=0;
	virtual void setResultWindowCount(unsigned int val)=0;
	virtual void copy(IConstExecuteSQLResponse &from)=0;
};

interface IClientExecuteSQLResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getParentWuId()=0;
	virtual const char * getResult()=0;
	virtual IConstECLWorkunit & getWorkunit()=0;
	virtual int getResultLimit()=0;
	virtual unsigned int getResultWindowStart()=0;
	virtual unsigned int getResultWindowCount()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstExecutePreparedSQLRequest : extends IEspRequest
{
	virtual const char * getWuId()=0;
	virtual const char * getUserName()=0;
	virtual const char * getTargetCluster()=0;
	virtual bool getSuppressResults()=0;
	virtual bool getSuppressXmlSchema()=0;
	virtual int getWait()=0;
	virtual int getResultWindowStart()=0;
	virtual int getResultWindowCount()=0;
	virtual IArrayOf<IConstNamedValue> & getVariables()=0;
};

interface IEspExecutePreparedSQLRequest : extends IConstExecutePreparedSQLRequest
{
	virtual void setWuId(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setTargetCluster(const char * val)=0;
	virtual void setSuppressResults(bool val)=0;
	virtual void setSuppressXmlSchema(bool val)=0;
	virtual void setWait(int val)=0;
	virtual void setResultWindowStart(int val)=0;
	virtual void setResultWindowCount(int val)=0;
	virtual void setVariables(IArrayOf<IEspNamedValue> &val)=0;
	virtual void setVariables(IArrayOf<IConstNamedValue> &val)=0;
	virtual void copy(IConstExecutePreparedSQLRequest &from)=0;
};

interface IClientExecutePreparedSQLRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setWuId(const char * val)=0;
	virtual void setUserName(const char * val)=0;
	virtual void setTargetCluster(const char * val)=0;
	virtual void setSuppressResults(bool val)=0;
	virtual void setSuppressXmlSchema(bool val)=0;
	virtual void setWait(int val)=0;
	virtual void setResultWindowStart(int val)=0;
	virtual void setResultWindowCount(int val)=0;
	virtual void setVariables(IArrayOf<IEspNamedValue> &val)=0;
	virtual void setVariables(IArrayOf<IConstNamedValue> &val)=0;
};



interface IConstExecutePreparedSQLResponse : extends IEspResponse
{
	virtual const char * getParentWuId()=0;
	virtual const char * getResult()=0;
	virtual unsigned int getResultWindowStart()=0;
	virtual unsigned int getResultWindowCount()=0;
	virtual IConstECLWorkunit & getWorkunit()=0;
};

interface IEspExecutePreparedSQLResponse : extends IConstExecutePreparedSQLResponse
{
	virtual void setParentWuId(const char * val)=0;
	virtual void setResult(const char * val)=0;
	virtual void setResultWindowStart(unsigned int val)=0;
	virtual void setResultWindowCount(unsigned int val)=0;
	virtual IEspECLWorkunit & updateWorkunit()=0;
	virtual void setWorkunit(IConstECLWorkunit &ifrom)=0;
	virtual void copy(IConstExecutePreparedSQLResponse &from)=0;
};

interface IClientExecutePreparedSQLResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getParentWuId()=0;
	virtual const char * getResult()=0;
	virtual unsigned int getResultWindowStart()=0;
	virtual unsigned int getResultWindowCount()=0;
	virtual IConstECLWorkunit & getWorkunit()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetDBSystemInfoRequest : extends IEspRequest
{
	virtual bool getIncludeAll()=0;
};

interface IEspGetDBSystemInfoRequest : extends IConstGetDBSystemInfoRequest
{
	virtual void setIncludeAll(bool val)=0;
	virtual void copy(IConstGetDBSystemInfoRequest &from)=0;
};

interface IClientGetDBSystemInfoRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setIncludeAll(bool val)=0;
};



interface IConstGetDBSystemInfoResponse : extends IEspResponse
{
	virtual const char * getName()=0;
	virtual const char * getFullVersion()=0;
	virtual const char * getMajor()=0;
	virtual const char * getMinor()=0;
	virtual const char * getPoint()=0;
	virtual const char * getProject()=0;
	virtual const char * getMaturity()=0;
	virtual const char * getWsSQLFullVersion()=0;
	virtual const char * getWsSQLMajor()=0;
	virtual const char * getWsSQLMinor()=0;
	virtual const char * getWsSQLPoint()=0;
	virtual const char * getWsSQLProject()=0;
	virtual const char * getWsSQLMaturity()=0;
};

interface IEspGetDBSystemInfoResponse : extends IConstGetDBSystemInfoResponse
{
	virtual void setName(const char * val)=0;
	virtual void setFullVersion(const char * val)=0;
	virtual void setMajor(const char * val)=0;
	virtual void setMinor(const char * val)=0;
	virtual void setPoint(const char * val)=0;
	virtual void setProject(const char * val)=0;
	virtual void setMaturity(const char * val)=0;
	virtual void setWsSQLFullVersion(const char * val)=0;
	virtual void setWsSQLMajor(const char * val)=0;
	virtual void setWsSQLMinor(const char * val)=0;
	virtual void setWsSQLPoint(const char * val)=0;
	virtual void setWsSQLProject(const char * val)=0;
	virtual void setWsSQLMaturity(const char * val)=0;
	virtual void copy(IConstGetDBSystemInfoResponse &from)=0;
};

interface IClientGetDBSystemInfoResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getName()=0;
	virtual const char * getFullVersion()=0;
	virtual const char * getMajor()=0;
	virtual const char * getMinor()=0;
	virtual const char * getPoint()=0;
	virtual const char * getProject()=0;
	virtual const char * getMaturity()=0;
	virtual const char * getWsSQLFullVersion()=0;
	virtual const char * getWsSQLMajor()=0;
	virtual const char * getWsSQLMinor()=0;
	virtual const char * getWsSQLPoint()=0;
	virtual const char * getWsSQLProject()=0;
	virtual const char * getWsSQLMaturity()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetDBMetaDataRequest : extends IEspRequest
{
	virtual bool getIncludeTables()=0;
	virtual const char * getTableFilter()=0;
	virtual bool getIncludeStoredProcedures()=0;
	virtual const char * getQuerySet()=0;
	virtual bool getIncludeTargetClusters()=0;
	virtual const char * getClusterType()=0;
};

interface IEspGetDBMetaDataRequest : extends IConstGetDBMetaDataRequest
{
	virtual void setIncludeTables(bool val)=0;
	virtual void setTableFilter(const char * val)=0;
	virtual void setIncludeStoredProcedures(bool val)=0;
	virtual void setQuerySet(const char * val)=0;
	virtual void setIncludeTargetClusters(bool val)=0;
	virtual void setClusterType(const char * val)=0;
	virtual void copy(IConstGetDBMetaDataRequest &from)=0;
};

interface IClientGetDBMetaDataRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setIncludeTables(bool val)=0;
	virtual void setTableFilter(const char * val)=0;
	virtual void setIncludeStoredProcedures(bool val)=0;
	virtual void setQuerySet(const char * val)=0;
	virtual void setIncludeTargetClusters(bool val)=0;
	virtual void setClusterType(const char * val)=0;
};



interface IConstGetDBMetaDataResponse : extends IEspResponse
{
	virtual IArrayOf<IConstHPCCTable> & getTables()=0;
	virtual int getTableCount()=0;
	virtual IArrayOf<IConstHPCCQuerySet> & getQuerySets()=0;
	virtual StringArray & getClusterNames()=0;
};

interface IEspGetDBMetaDataResponse : extends IConstGetDBMetaDataResponse
{
	virtual void setTables(IArrayOf<IEspHPCCTable> &val)=0;
	virtual void setTables(IArrayOf<IConstHPCCTable> &val)=0;
	virtual void setTableCount(int val)=0;
	virtual void setQuerySets(IArrayOf<IEspHPCCQuerySet> &val)=0;
	virtual void setQuerySets(IArrayOf<IConstHPCCQuerySet> &val)=0;
	virtual void setClusterNames(StringArray &val)=0;
	virtual void copy(IConstGetDBMetaDataResponse &from)=0;
};

interface IClientGetDBMetaDataResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstHPCCTable> & getTables()=0;
	virtual int getTableCount()=0;
	virtual IArrayOf<IConstHPCCQuerySet> & getQuerySets()=0;
	virtual StringArray & getClusterNames()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstGetResultsRequest : extends IEspRequest
{
	virtual const char * getWuId()=0;
	virtual bool getSuppressXmlSchema()=0;
	virtual int getResultWindowStart()=0;
	virtual int getResultWindowCount()=0;
};

interface IEspGetResultsRequest : extends IConstGetResultsRequest
{
	virtual void setWuId(const char * val)=0;
	virtual void setSuppressXmlSchema(bool val)=0;
	virtual void setResultWindowStart(int val)=0;
	virtual void setResultWindowCount(int val)=0;
	virtual void copy(IConstGetResultsRequest &from)=0;
};

interface IClientGetResultsRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setWuId(const char * val)=0;
	virtual void setSuppressXmlSchema(bool val)=0;
	virtual void setResultWindowStart(int val)=0;
	virtual void setResultWindowCount(int val)=0;
};



interface IConstGetResultsResponse : extends IEspResponse
{
	virtual const char * getResult()=0;
	virtual unsigned int getResultWindowStart()=0;
	virtual unsigned int getResultWindowCount()=0;
	virtual IConstECLWorkunit & getWorkunit()=0;
};

interface IEspGetResultsResponse : extends IConstGetResultsResponse
{
	virtual void setResult(const char * val)=0;
	virtual void setResultWindowStart(unsigned int val)=0;
	virtual void setResultWindowCount(unsigned int val)=0;
	virtual IEspECLWorkunit & updateWorkunit()=0;
	virtual void setWorkunit(IConstECLWorkunit &ifrom)=0;
	virtual void copy(IConstGetResultsResponse &from)=0;
};

interface IClientGetResultsResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getResult()=0;
	virtual unsigned int getResultWindowStart()=0;
	virtual unsigned int getResultWindowCount()=0;
	virtual IConstECLWorkunit & getWorkunit()=0;

	virtual const IMultiException& getExceptions()=0;
};



interface IConstEchoRequest : extends IEspRequest
{
	virtual const char * getRequest()=0;
};

interface IEspEchoRequest : extends IConstEchoRequest
{
	virtual void setRequest(const char * val)=0;
	virtual void copy(IConstEchoRequest &from)=0;
};

interface IClientEchoRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setRequest(const char * val)=0;
};



interface IConstEchoResponse : extends IEspResponse
{
	virtual const char * getResponse()=0;
};

interface IEspEchoResponse : extends IConstEchoResponse
{
	virtual void setResponse(const char * val)=0;
	virtual void copy(IConstEchoResponse &from)=0;
};

interface IClientEchoResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getResponse()=0;
};



interface IConstRelatedIndexSet : extends IEspStruct
{
	virtual const char * getFileName()=0;
	virtual StringArray & getIndexes()=0;
};

interface IEspRelatedIndexSet : extends IConstRelatedIndexSet
{
	virtual void setFileName(const char * val)=0;
	virtual void setIndexes(StringArray &val)=0;
	virtual void copy(IConstRelatedIndexSet &from)=0;
};

interface IClientRelatedIndexSet : extends IInterface
{
	virtual void setFileName(const char * val)=0;
	virtual void setIndexes(StringArray &val)=0;
	virtual const char * getFileName()=0;
	virtual StringArray & getIndexes()=0;
};



interface IConstGetRelatedIndexesRequest : extends IEspRequest
{
	virtual StringArray & getFileNames()=0;
};

interface IEspGetRelatedIndexesRequest : extends IConstGetRelatedIndexesRequest
{
	virtual void setFileNames(StringArray &val)=0;
	virtual void copy(IConstGetRelatedIndexesRequest &from)=0;
};

interface IClientGetRelatedIndexesRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setFileNames(StringArray &val)=0;
};



interface IConstGetRelatedIndexesResponse : extends IEspResponse
{
	virtual IArrayOf<IConstRelatedIndexSet> & getRelatedIndexSets()=0;
};

interface IEspGetRelatedIndexesResponse : extends IConstGetRelatedIndexesResponse
{
	virtual void setRelatedIndexSets(IArrayOf<IEspRelatedIndexSet> &val)=0;
	virtual void setRelatedIndexSets(IArrayOf<IConstRelatedIndexSet> &val)=0;
	virtual void copy(IConstGetRelatedIndexesResponse &from)=0;
};

interface IClientGetRelatedIndexesResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstRelatedIndexSet> & getRelatedIndexSets()=0;
};



interface IConstSetRelatedIndexesRequest : extends IEspRequest
{
	virtual IArrayOf<IConstRelatedIndexSet> & getRelatedIndexSets()=0;
};

interface IEspSetRelatedIndexesRequest : extends IConstSetRelatedIndexesRequest
{
	virtual void setRelatedIndexSets(IArrayOf<IEspRelatedIndexSet> &val)=0;
	virtual void setRelatedIndexSets(IArrayOf<IConstRelatedIndexSet> &val)=0;
	virtual void copy(IConstSetRelatedIndexesRequest &from)=0;
};

interface IClientSetRelatedIndexesRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setRelatedIndexSets(IArrayOf<IEspRelatedIndexSet> &val)=0;
	virtual void setRelatedIndexSets(IArrayOf<IConstRelatedIndexSet> &val)=0;
};



interface IConstSetRelatedIndexesResponse : extends IEspResponse
{
	virtual IArrayOf<IConstRelatedIndexSet> & getRelatedIndexSets()=0;
};

interface IEspSetRelatedIndexesResponse : extends IConstSetRelatedIndexesResponse
{
	virtual void setRelatedIndexSets(IArrayOf<IEspRelatedIndexSet> &val)=0;
	virtual void setRelatedIndexSets(IArrayOf<IConstRelatedIndexSet> &val)=0;
	virtual void copy(IConstSetRelatedIndexesResponse &from)=0;
};

interface IClientSetRelatedIndexesResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual IArrayOf<IConstRelatedIndexSet> & getRelatedIndexSets()=0;
};



enum CHPCCFieldType { HPCCFieldType_Undefined=-1,CHPCCFieldType_BOOLEAN, CHPCCFieldType_INTEGER, CHPCCFieldType_xUNSIGNED, CHPCCFieldType_REAL, CHPCCFieldType_DECIMAL, CHPCCFieldType_UDECIMAL, CHPCCFieldType_xSTRING, CHPCCFieldType_QSTRING, CHPCCFieldType_UNICODE, CHPCCFieldType_DATA, CHPCCFieldType_VARSTRING, CHPCCFieldType_VARUNICODE, };
typedef ArrayOf<CHPCCFieldType> HPCCFieldTypeArray;


interface IConstEclFieldType : extends IEspStruct
{
	virtual CHPCCFieldType getType()=0;
	virtual const char* getTypeAsString()=0;
	virtual const char * getLocale()=0;
	virtual int getLength()=0;
	virtual int getPrecision()=0;
};

interface IEspEclFieldType : extends IConstEclFieldType
{
	virtual void setType(CHPCCFieldType val)=0;
	virtual void setType(const char* val)=0;
	virtual void setLocale(const char * val)=0;
	virtual void setLength(int val)=0;
	virtual void setPrecision(int val)=0;
	virtual void copy(IConstEclFieldType &from)=0;
};

interface IClientEclFieldType : extends IInterface
{
	virtual void setType(CHPCCFieldType val)=0;
	virtual void setType(const char* val)=0;
	virtual void setLocale(const char * val)=0;
	virtual void setLength(int val)=0;
	virtual void setPrecision(int val)=0;
	virtual CHPCCFieldType getType()=0;
	virtual const char* getTypeAsString()=0;
	virtual const char * getLocale()=0;
	virtual int getLength()=0;
	virtual int getPrecision()=0;
};



interface IConstEclFieldDeclaration : extends IEspStruct
{
	virtual const char * getFieldName()=0;
	virtual IConstEclFieldType & getEclFieldType()=0;
};

interface IEspEclFieldDeclaration : extends IConstEclFieldDeclaration
{
	virtual void setFieldName(const char * val)=0;
	virtual IEspEclFieldType & updateEclFieldType()=0;
	virtual void setEclFieldType(IConstEclFieldType &ifrom)=0;
	virtual void copy(IConstEclFieldDeclaration &from)=0;
};

interface IClientEclFieldDeclaration : extends IInterface
{
	virtual void setFieldName(const char * val)=0;
	virtual IEspEclFieldType & updateEclFieldType()=0;
	virtual void setEclFieldType(IConstEclFieldType &ifrom)=0;
	virtual const char * getFieldName()=0;
	virtual IConstEclFieldType & getEclFieldType()=0;
};



interface IConstDataTypeParam : extends IEspStruct
{
	virtual const char * getName()=0;
	virtual StringArray & getValues()=0;
};

interface IEspDataTypeParam : extends IConstDataTypeParam
{
	virtual void setName(const char * val)=0;
	virtual void setValues(StringArray &val)=0;
	virtual void copy(IConstDataTypeParam &from)=0;
};

interface IClientDataTypeParam : extends IInterface
{
	virtual void setName(const char * val)=0;
	virtual void setValues(StringArray &val)=0;
	virtual const char * getName()=0;
	virtual StringArray & getValues()=0;
};



enum CHPCCFileType { HPCCFileType_Undefined=-1,CHPCCFileType_FLAT, CHPCCFileType_CSV, CHPCCFileType_JSON, CHPCCFileType_XML, };
typedef ArrayOf<CHPCCFileType> HPCCFileTypeArray;


interface IConstDataType : extends IEspStruct
{
	virtual CHPCCFileType getType()=0;
	virtual const char* getTypeAsString()=0;
	virtual IArrayOf<IConstDataTypeParam> & getParams()=0;
};

interface IEspDataType : extends IConstDataType
{
	virtual void setType(CHPCCFileType val)=0;
	virtual void setType(const char* val)=0;
	virtual void setParams(IArrayOf<IEspDataTypeParam> &val)=0;
	virtual void setParams(IArrayOf<IConstDataTypeParam> &val)=0;
	virtual void copy(IConstDataType &from)=0;
};

interface IClientDataType : extends IInterface
{
	virtual void setType(CHPCCFileType val)=0;
	virtual void setType(const char* val)=0;
	virtual void setParams(IArrayOf<IEspDataTypeParam> &val)=0;
	virtual void setParams(IArrayOf<IConstDataTypeParam> &val)=0;
	virtual CHPCCFileType getType()=0;
	virtual const char* getTypeAsString()=0;
	virtual IArrayOf<IConstDataTypeParam> & getParams()=0;
};



interface IConstDataSourceInfo : extends IEspStruct
{
	virtual const char * getSprayedFileName()=0;
	virtual const char * getLandingZoneIP()=0;
	virtual const char * getLandingZonePath()=0;
	virtual const char * getLandingZoneFileName()=0;
};

interface IEspDataSourceInfo : extends IConstDataSourceInfo
{
	virtual void setSprayedFileName(const char * val)=0;
	virtual void setLandingZoneIP(const char * val)=0;
	virtual void setLandingZonePath(const char * val)=0;
	virtual void setLandingZoneFileName(const char * val)=0;
	virtual void copy(IConstDataSourceInfo &from)=0;
};

interface IClientDataSourceInfo : extends IInterface
{
	virtual void setSprayedFileName(const char * val)=0;
	virtual void setLandingZoneIP(const char * val)=0;
	virtual void setLandingZonePath(const char * val)=0;
	virtual void setLandingZoneFileName(const char * val)=0;
	virtual const char * getSprayedFileName()=0;
	virtual const char * getLandingZoneIP()=0;
	virtual const char * getLandingZonePath()=0;
	virtual const char * getLandingZoneFileName()=0;
};



interface IConstCreateTableAndLoadRequest : extends IEspRequest
{
	virtual const char * getTableName()=0;
	virtual const char * getTableDescription()=0;
	virtual bool getOverwrite()=0;
	virtual IArrayOf<IConstEclFieldDeclaration> & getEclFields()=0;
	virtual const char * getTargetCluster()=0;
	virtual const char * getOwner()=0;
	virtual IConstDataSourceInfo & getDataSource()=0;
	virtual IConstDataType & getDataSourceType()=0;
	virtual int getWait()=0;
};

interface IEspCreateTableAndLoadRequest : extends IConstCreateTableAndLoadRequest
{
	virtual void setTableName(const char * val)=0;
	virtual void setTableDescription(const char * val)=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setEclFields(IArrayOf<IEspEclFieldDeclaration> &val)=0;
	virtual void setEclFields(IArrayOf<IConstEclFieldDeclaration> &val)=0;
	virtual void setTargetCluster(const char * val)=0;
	virtual void setOwner(const char * val)=0;
	virtual IEspDataSourceInfo & updateDataSource()=0;
	virtual void setDataSource(IConstDataSourceInfo &ifrom)=0;
	virtual IEspDataType & updateDataSourceType()=0;
	virtual void setDataSourceType(IConstDataType &ifrom)=0;
	virtual void setWait(int val)=0;
	virtual void copy(IConstCreateTableAndLoadRequest &from)=0;
};

interface IClientCreateTableAndLoadRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

	virtual void setTableName(const char * val)=0;
	virtual void setTableDescription(const char * val)=0;
	virtual void setOverwrite(bool val)=0;
	virtual void setEclFields(IArrayOf<IEspEclFieldDeclaration> &val)=0;
	virtual void setEclFields(IArrayOf<IConstEclFieldDeclaration> &val)=0;
	virtual void setTargetCluster(const char * val)=0;
	virtual void setOwner(const char * val)=0;
	virtual IEspDataSourceInfo & updateDataSource()=0;
	virtual void setDataSource(IConstDataSourceInfo &ifrom)=0;
	virtual IEspDataType & updateDataSourceType()=0;
	virtual void setDataSourceType(IConstDataType &ifrom)=0;
	virtual void setWait(int val)=0;
};



interface IConstCreateTableAndLoadResponse : extends IEspResponse
{
	virtual const char * getTableName()=0;
	virtual bool getSuccess()=0;
	virtual const char * getEclRecordDefinition()=0;
	virtual IConstECLWorkunit & getWorkunit()=0;
};

interface IEspCreateTableAndLoadResponse : extends IConstCreateTableAndLoadResponse
{
	virtual void setTableName(const char * val)=0;
	virtual void setSuccess(bool val)=0;
	virtual void setEclRecordDefinition(const char * val)=0;
	virtual IEspECLWorkunit & updateWorkunit()=0;
	virtual void setWorkunit(IConstECLWorkunit &ifrom)=0;
	virtual void copy(IConstCreateTableAndLoadResponse &from)=0;
};

interface IClientCreateTableAndLoadResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
	virtual const char * getTableName()=0;
	virtual bool getSuccess()=0;
	virtual const char * getEclRecordDefinition()=0;
	virtual IConstECLWorkunit & getWorkunit()=0;
};



interface IConstwssqlPingRequest : extends IEspRequest
{
};

interface IEspwssqlPingRequest : extends IConstwssqlPingRequest
{
	virtual void copy(IConstwssqlPingRequest &from)=0;
};

interface IClientwssqlPingRequest : extends IInterface
{

	virtual IEspClientRpcSettings &rpc() = 0;

};

interface IConstwssqlPingResponse : extends IEspResponse
{
};

interface IEspwssqlPingResponse : extends IConstwssqlPingResponse
{
	virtual void copy(IConstwssqlPingResponse &from)=0;
};

interface IClientwssqlPingResponse : extends IInterface
{

	virtual int queryClientStatus()=0;
};

interface IEspwssql : extends IEspService
{
	virtual bool onCreateTableAndLoad(IEspContext &context, IEspCreateTableAndLoadRequest &req, IEspCreateTableAndLoadResponse &resp)=0;
	virtual bool onEcho(IEspContext &context, IEspEchoRequest &req, IEspEchoResponse &resp)=0;
	virtual bool onExecutePreparedSQL(IEspContext &context, IEspExecutePreparedSQLRequest &req, IEspExecutePreparedSQLResponse &resp)=0;
	virtual bool onExecuteSQL(IEspContext &context, IEspExecuteSQLRequest &req, IEspExecuteSQLResponse &resp)=0;
	virtual bool onGetDBMetaData(IEspContext &context, IEspGetDBMetaDataRequest &req, IEspGetDBMetaDataResponse &resp)=0;
	virtual bool onGetDBSystemInfo(IEspContext &context, IEspGetDBSystemInfoRequest &req, IEspGetDBSystemInfoResponse &resp)=0;
	virtual bool onGetRelatedIndexes(IEspContext &context, IEspGetRelatedIndexesRequest &req, IEspGetRelatedIndexesResponse &resp)=0;
	virtual bool onGetResults(IEspContext &context, IEspGetResultsRequest &req, IEspGetResultsResponse &resp)=0;
	virtual bool onPing(IEspContext &context, IEspwssqlPingRequest &req, IEspwssqlPingResponse &resp)=0;
	virtual bool onPrepareSQL(IEspContext &context, IEspPrepareSQLRequest &req, IEspPrepareSQLResponse &resp)=0;
	virtual bool onSetRelatedIndexes(IEspContext &context, IEspSetRelatedIndexesRequest &req, IEspSetRelatedIndexesResponse &resp)=0;
};

interface IClientwssqlEvents : extends IInterface
{
	virtual int onCreateTableAndLoadComplete(IClientCreateTableAndLoadResponse *resp,IInterface* state)=0;
	virtual int onCreateTableAndLoadError(IClientCreateTableAndLoadResponse *resp,IInterface* state)=0;
	virtual int onEchoComplete(IClientEchoResponse *resp,IInterface* state)=0;
	virtual int onEchoError(IClientEchoResponse *resp,IInterface* state)=0;
	virtual int onExecutePreparedSQLComplete(IClientExecutePreparedSQLResponse *resp,IInterface* state)=0;
	virtual int onExecutePreparedSQLError(IClientExecutePreparedSQLResponse *resp,IInterface* state)=0;
	virtual int onExecuteSQLComplete(IClientExecuteSQLResponse *resp,IInterface* state)=0;
	virtual int onExecuteSQLError(IClientExecuteSQLResponse *resp,IInterface* state)=0;
	virtual int onGetDBMetaDataComplete(IClientGetDBMetaDataResponse *resp,IInterface* state)=0;
	virtual int onGetDBMetaDataError(IClientGetDBMetaDataResponse *resp,IInterface* state)=0;
	virtual int onGetDBSystemInfoComplete(IClientGetDBSystemInfoResponse *resp,IInterface* state)=0;
	virtual int onGetDBSystemInfoError(IClientGetDBSystemInfoResponse *resp,IInterface* state)=0;
	virtual int onGetRelatedIndexesComplete(IClientGetRelatedIndexesResponse *resp,IInterface* state)=0;
	virtual int onGetRelatedIndexesError(IClientGetRelatedIndexesResponse *resp,IInterface* state)=0;
	virtual int onGetResultsComplete(IClientGetResultsResponse *resp,IInterface* state)=0;
	virtual int onGetResultsError(IClientGetResultsResponse *resp,IInterface* state)=0;
	virtual int onPingComplete(IClientwssqlPingResponse *resp,IInterface* state)=0;
	virtual int onPingError(IClientwssqlPingResponse *resp,IInterface* state)=0;
	virtual int onPrepareSQLComplete(IClientPrepareSQLResponse *resp,IInterface* state)=0;
	virtual int onPrepareSQLError(IClientPrepareSQLResponse *resp,IInterface* state)=0;
	virtual int onSetRelatedIndexesComplete(IClientSetRelatedIndexesResponse *resp,IInterface* state)=0;
	virtual int onSetRelatedIndexesError(IClientSetRelatedIndexesResponse *resp,IInterface* state)=0;
};

interface IClientwssql : extends IInterface
{
	virtual void setProxyAddress(const char *address)=0;
	virtual void addServiceUrl(const char *url)=0;
	virtual void removeServiceUrl(const char *url)=0;
	virtual void setUsernameToken(const char *userName,const char *passWord,const char *realm)=0;
	virtual void setAction(const char *action)=0;

	virtual IClientCreateTableAndLoadRequest * createCreateTableAndLoadRequest()=0;
	virtual IClientCreateTableAndLoadResponse * CreateTableAndLoad(IClientCreateTableAndLoadRequest *request)=0;
	virtual void async_CreateTableAndLoad(IClientCreateTableAndLoadRequest *request, IClientwssqlEvents *events,IInterface* state=0)=0;

	virtual IClientEchoRequest * createEchoRequest()=0;
	virtual IClientEchoResponse * Echo(IClientEchoRequest *request)=0;
	virtual void async_Echo(IClientEchoRequest *request, IClientwssqlEvents *events,IInterface* state=0)=0;

	virtual IClientExecutePreparedSQLRequest * createExecutePreparedSQLRequest()=0;
	virtual IClientExecutePreparedSQLResponse * ExecutePreparedSQL(IClientExecutePreparedSQLRequest *request)=0;
	virtual void async_ExecutePreparedSQL(IClientExecutePreparedSQLRequest *request, IClientwssqlEvents *events,IInterface* state=0)=0;

	virtual IClientExecuteSQLRequest * createExecuteSQLRequest()=0;
	virtual IClientExecuteSQLResponse * ExecuteSQL(IClientExecuteSQLRequest *request)=0;
	virtual void async_ExecuteSQL(IClientExecuteSQLRequest *request, IClientwssqlEvents *events,IInterface* state=0)=0;

	virtual IClientGetDBMetaDataRequest * createGetDBMetaDataRequest()=0;
	virtual IClientGetDBMetaDataResponse * GetDBMetaData(IClientGetDBMetaDataRequest *request)=0;
	virtual void async_GetDBMetaData(IClientGetDBMetaDataRequest *request, IClientwssqlEvents *events,IInterface* state=0)=0;

	virtual IClientGetDBSystemInfoRequest * createGetDBSystemInfoRequest()=0;
	virtual IClientGetDBSystemInfoResponse * GetDBSystemInfo(IClientGetDBSystemInfoRequest *request)=0;
	virtual void async_GetDBSystemInfo(IClientGetDBSystemInfoRequest *request, IClientwssqlEvents *events,IInterface* state=0)=0;

	virtual IClientGetRelatedIndexesRequest * createGetRelatedIndexesRequest()=0;
	virtual IClientGetRelatedIndexesResponse * GetRelatedIndexes(IClientGetRelatedIndexesRequest *request)=0;
	virtual void async_GetRelatedIndexes(IClientGetRelatedIndexesRequest *request, IClientwssqlEvents *events,IInterface* state=0)=0;

	virtual IClientGetResultsRequest * createGetResultsRequest()=0;
	virtual IClientGetResultsResponse * GetResults(IClientGetResultsRequest *request)=0;
	virtual void async_GetResults(IClientGetResultsRequest *request, IClientwssqlEvents *events,IInterface* state=0)=0;

	virtual IClientwssqlPingRequest * createPingRequest()=0;
	virtual IClientwssqlPingResponse * Ping(IClientwssqlPingRequest *request)=0;
	virtual void async_Ping(IClientwssqlPingRequest *request, IClientwssqlEvents *events,IInterface* state=0)=0;

	virtual IClientPrepareSQLRequest * createPrepareSQLRequest()=0;
	virtual IClientPrepareSQLResponse * PrepareSQL(IClientPrepareSQLRequest *request)=0;
	virtual void async_PrepareSQL(IClientPrepareSQLRequest *request, IClientwssqlEvents *events,IInterface* state=0)=0;

	virtual IClientSetRelatedIndexesRequest * createSetRelatedIndexesRequest()=0;
	virtual IClientSetRelatedIndexesResponse * SetRelatedIndexes(IClientSetRelatedIndexesRequest *request)=0;
	virtual void async_SetRelatedIndexes(IClientSetRelatedIndexesRequest *request, IClientwssqlEvents *events,IInterface* state=0)=0;


	virtual IClientCreateTableAndLoadResponse *CreateTableAndLoadFn(const char * TableName_, const char * TableDescription_, bool Overwrite_, IArrayOf<IConstEclFieldDeclaration> &EclFields_, const char * TargetCluster_, const char * Owner_, IConstDataSourceInfo &DataSource_, IConstDataType &DataSourceType_, int Wait_)=0;

	virtual IClientEchoResponse *EchoFn(const char * Request_)=0;

	virtual IClientExecutePreparedSQLResponse *ExecutePreparedSQLFn(const char * WuId_, const char * UserName_, const char * TargetCluster_, bool SuppressResults_, bool SuppressXmlSchema_, int Wait_, int ResultWindowStart_, int ResultWindowCount_, IArrayOf<IConstNamedValue> &Variables_)=0;

	virtual IClientExecuteSQLResponse *ExecuteSQLFn(const char * SqlText_, const char * UserName_, const char * TargetCluster_, StringArray &AlternateClusters_, const char * TargetQuerySet_, bool SuppressResults_, bool SuppressXmlSchema_, int Wait_, int resultLimit_, int ResultWindowStart_, int ResultWindowCount_, bool IgnoreCache_)=0;

	virtual IClientGetDBMetaDataResponse *GetDBMetaDataFn(bool IncludeTables_, const char * TableFilter_, bool IncludeStoredProcedures_, const char * QuerySet_, bool IncludeTargetClusters_, const char * ClusterType_)=0;

	virtual IClientGetDBSystemInfoResponse *GetDBSystemInfoFn(bool IncludeAll_)=0;

	virtual IClientGetRelatedIndexesResponse *GetRelatedIndexesFn(StringArray &FileNames_)=0;

	virtual IClientGetResultsResponse *GetResultsFn(const char * WuId_, bool SuppressXmlSchema_, int ResultWindowStart_, int ResultWindowCount_)=0;

	virtual IClientwssqlPingResponse *PingFn()=0;

	virtual IClientPrepareSQLResponse *PrepareSQLFn(const char * SqlText_, const char * TargetCluster_, StringArray &AlternateClusters_, const char * TargetQuerySet_, int Wait_)=0;

	virtual IClientSetRelatedIndexesResponse *SetRelatedIndexesFn(IArrayOf<IConstRelatedIndexSet> &RelatedIndexSets_)=0;
};



#ifndef wssql_API
#define wssql_API
#endif //wssql_API



extern "C" wssql_API IClientwssql * createwssqlClient();


extern "C"  IEspHPCCColumn *createHPCCColumn(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientHPCCColumn *createClientHPCCColumn(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspHPCCTable *createHPCCTable(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientHPCCTable *createClientHPCCTable(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspOutputDataset *createOutputDataset(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientOutputDataset *createClientOutputDataset(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspQuerySignature *createQuerySignature(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientQuerySignature *createClientQuerySignature(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspPublishedQuery *createPublishedQuery(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientPublishedQuery *createClientPublishedQuery(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspQuerySetAliasMap *createQuerySetAliasMap(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientQuerySetAliasMap *createClientQuerySetAliasMap(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspHPCCQuerySet *createHPCCQuerySet(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientHPCCQuerySet *createClientHPCCQuerySet(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspHPCCTargetCluster *createHPCCTargetCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientHPCCTargetCluster *createClientHPCCTargetCluster(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspPrepareSQLRequest *createPrepareSQLRequest(const char *serv=NULL);
extern "C"  IClientPrepareSQLRequest *createClientPrepareSQLRequest(const char *serv=NULL);
extern "C"  IEspPrepareSQLResponse *createPrepareSQLResponse(const char *serv=NULL);
extern "C"  IClientPrepareSQLResponse *createClientPrepareSQLResponse(const char *serv=NULL);
extern "C"  IEspExecuteSQLRequest *createExecuteSQLRequest(const char *serv=NULL);
extern "C"  IClientExecuteSQLRequest *createClientExecuteSQLRequest(const char *serv=NULL);
extern "C"  IEspExecuteSQLResponse *createExecuteSQLResponse(const char *serv=NULL);
extern "C"  IClientExecuteSQLResponse *createClientExecuteSQLResponse(const char *serv=NULL);
extern "C"  IEspExecutePreparedSQLRequest *createExecutePreparedSQLRequest(const char *serv=NULL);
extern "C"  IClientExecutePreparedSQLRequest *createClientExecutePreparedSQLRequest(const char *serv=NULL);
extern "C"  IEspExecutePreparedSQLResponse *createExecutePreparedSQLResponse(const char *serv=NULL);
extern "C"  IClientExecutePreparedSQLResponse *createClientExecutePreparedSQLResponse(const char *serv=NULL);
extern "C"  IEspGetDBSystemInfoRequest *createGetDBSystemInfoRequest(const char *serv=NULL);
extern "C"  IClientGetDBSystemInfoRequest *createClientGetDBSystemInfoRequest(const char *serv=NULL);
extern "C"  IEspGetDBSystemInfoResponse *createGetDBSystemInfoResponse(const char *serv=NULL);
extern "C"  IClientGetDBSystemInfoResponse *createClientGetDBSystemInfoResponse(const char *serv=NULL);
extern "C"  IEspGetDBMetaDataRequest *createGetDBMetaDataRequest(const char *serv=NULL);
extern "C"  IClientGetDBMetaDataRequest *createClientGetDBMetaDataRequest(const char *serv=NULL);
extern "C"  IEspGetDBMetaDataResponse *createGetDBMetaDataResponse(const char *serv=NULL);
extern "C"  IClientGetDBMetaDataResponse *createClientGetDBMetaDataResponse(const char *serv=NULL);
extern "C"  IEspGetResultsRequest *createGetResultsRequest(const char *serv=NULL);
extern "C"  IClientGetResultsRequest *createClientGetResultsRequest(const char *serv=NULL);
extern "C"  IEspGetResultsResponse *createGetResultsResponse(const char *serv=NULL);
extern "C"  IClientGetResultsResponse *createClientGetResultsResponse(const char *serv=NULL);
extern "C"  IEspEchoRequest *createEchoRequest(const char *serv=NULL);
extern "C"  IClientEchoRequest *createClientEchoRequest(const char *serv=NULL);
extern "C"  IEspEchoResponse *createEchoResponse(const char *serv=NULL);
extern "C"  IClientEchoResponse *createClientEchoResponse(const char *serv=NULL);
extern "C"  IEspRelatedIndexSet *createRelatedIndexSet(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientRelatedIndexSet *createClientRelatedIndexSet(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspGetRelatedIndexesRequest *createGetRelatedIndexesRequest(const char *serv=NULL);
extern "C"  IClientGetRelatedIndexesRequest *createClientGetRelatedIndexesRequest(const char *serv=NULL);
extern "C"  IEspGetRelatedIndexesResponse *createGetRelatedIndexesResponse(const char *serv=NULL);
extern "C"  IClientGetRelatedIndexesResponse *createClientGetRelatedIndexesResponse(const char *serv=NULL);
extern "C"  IEspSetRelatedIndexesRequest *createSetRelatedIndexesRequest(const char *serv=NULL);
extern "C"  IClientSetRelatedIndexesRequest *createClientSetRelatedIndexesRequest(const char *serv=NULL);
extern "C"  IEspSetRelatedIndexesResponse *createSetRelatedIndexesResponse(const char *serv=NULL);
extern "C"  IClientSetRelatedIndexesResponse *createClientSetRelatedIndexesResponse(const char *serv=NULL);
extern "C"  IEspEclFieldType *createEclFieldType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientEclFieldType *createClientEclFieldType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspEclFieldDeclaration *createEclFieldDeclaration(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientEclFieldDeclaration *createClientEclFieldDeclaration(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspDataTypeParam *createDataTypeParam(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDataTypeParam *createClientDataTypeParam(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspDataType *createDataType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDataType *createClientDataType(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspDataSourceInfo *createDataSourceInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IClientDataSourceInfo *createClientDataSourceInfo(const char *serv=NULL, const char *msgname=NULL);
extern "C"  IEspCreateTableAndLoadRequest *createCreateTableAndLoadRequest(const char *serv=NULL);
extern "C"  IClientCreateTableAndLoadRequest *createClientCreateTableAndLoadRequest(const char *serv=NULL);
extern "C"  IEspCreateTableAndLoadResponse *createCreateTableAndLoadResponse(const char *serv=NULL);
extern "C"  IClientCreateTableAndLoadResponse *createClientCreateTableAndLoadResponse(const char *serv=NULL);
extern "C"  IEspwssqlPingRequest *createwssqlPingRequest(const char *serv=NULL);
extern "C"  IClientwssqlPingRequest *createClientwssqlPingRequest(const char *serv=NULL);
extern "C"  IEspwssqlPingResponse *createwssqlPingResponse(const char *serv=NULL);
extern "C"  IClientwssqlPingResponse *createClientwssqlPingResponse(const char *serv=NULL);

#endif // _ws_sql_SCM_INCL
//end
