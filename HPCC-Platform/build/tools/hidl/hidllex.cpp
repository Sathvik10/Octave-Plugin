#line 2 "/home/sathvik/hpcc/HPCC-Platform/build/tools/hidl/hidllex.cpp"

#line 4 "/home/sathvik/hpcc/HPCC-Platform/build/tools/hidl/hidllex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 100
#define YY_END_OF_BUFFER 101
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[523] =
    {   0,
        0,    0,    0,    0,  101,   99,    2,    1,   99,   99,
       91,   90,   99,   99,   85,   85,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   95,   96,   97,    2,    0,   83,
        0,   89,   98,   87,   93,    0,    0,   85,    0,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   31,
        0,   88,   88,   88,   82,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   95,   94,    0,
        0,   89,    0,    0,   92,   86,   84,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   25,   88,   88,

       88,   32,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   81,    0,    0,    0,   87,    0,   88,   24,
       88,   23,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   28,   88,   88,   88,
       88,   88,   88,   34,   88,   88,   81,   88,   88,   22,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,    0,    0,    0,   86,   36,
       88,   21,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   82,   29,   33,   88,   88,   88,   88,
       88,   88,   88,   27,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   76,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   30,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   35,    3,    5,
       88,    9,   88,   88,   88,   40,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   63,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   12,   88,   88,   88,   88,   88,   88,   88,   88,
       88,    7,   88,   88,   39,   88,   38,   88,   88,   88,

       88,   55,   59,   88,   88,   88,   88,   88,   88,   88,
       88,   74,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   58,   88,   88,   61,   37,   18,   88,   88,
       88,   17,   88,   88,   88,   88,   88,   88,   88,   88,
       26,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       77,   88,   88,   64,   88,   88,   88,   88,   88,   88,
       88,   88,   68,   88,   70,   88,   88,   88,   88,   16,
       88,   88,   88,   11,   88,   88,   88,   88,   65,   88,
       67,   88,   88,   88,   88,   88,   79,   88,   78,   88,
       88,   88,   75,   88,   88,   88,   88,   88,   88,   88,

       54,   88,   88,   88,   19,   13,   88,   15,   88,    8,
       88,   88,   88,   51,   88,   52,   88,   88,   88,   53,
       88,   88,   88,   72,   88,   88,   88,   88,   88,   88,
       88,   88,   14,   88,   88,   88,   88,   57,   56,   80,
       88,   71,   62,   88,   73,   88,   88,   88,   69,   88,
       88,   88,   10,   88,    4,    6,   88,   66,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   60,   20,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   45,   88,   88,   50,
       88,   88,   88,   88,   88,   47,   44,   88,   88,   88,

       88,   88,   88,   46,   88,   88,   88,   88,   88,   42,
       88,   88,   88,   48,   88,   88,   49,   88,   88,   43,
       41,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    1,    6,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   14,
       14,   15,   14,   16,   14,   17,   17,    1,    1,    1,
        1,    1,    7,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   27,   40,   41,   42,
        1,   43,    1,    1,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   27,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   27,   66,
       67,   68,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    2,    3,    1,    1,    3,    4,    1,    1,
        1,    1,    5,    5,    5,    5,    6,    7,    7,    8,
        8,    8,    7,    9,    9,    9,    9,    9,    9,    9,
       10,    9,    9,    9,   10,    9,   10,    9,   10,   10,
        9,    9,    3,   11,    7,    7,    8,    8,    8,    7,
        9,    9,    9,    9,    9,    9,   10,    9,    9,    9,
       10,    9,   10,    9,   10,   10,    9,    9
    } ;

static const flex_int16_t yy_base[533] =
    {   0,
        0,    0,   66,   67,  217, 1269,  174, 1269,   67,    0,
     1269,  160,   63,   73,   73,   80,   36,   41,   82,   50,
       47,   74,    0,   71,  100,   73,   79,   74,   96,   89,
       89,  104,   89,   95,    0, 1269,  152,  161,  122, 1269,
      139,    0, 1269,  153, 1269,  138,  167,  174,    0,    0,
       94,  115,  131,  153,  143,  139,  145,  163,  161,  162,
      152,  155,  166,  180,    0,  169,  177,  176,  167,  175,
      181,  174,  177,  179,  189,  195,  185,    0, 1269,  237,
        0,    0,  245,  120, 1269,  250,    0,  199,  202,  215,
      210,  212,  227,  282,  213,  250,  238,    0,  247,  245,

      243,    0,  266,  248,  265,  263,  271,  275,  272,  269,
      280,  335,    0,  400,  440,  392,  404,  413,  290,    0,
      391,    0,  375,  395,  390,  417,  410,  411,  442,  423,
      443,  424,  426,  415,  432,  432,    0,  442,  443,  448,
      453,  448,  444,    0,  451,  462,    0,  474,  463,    0,
      473,  491,  493,  482,  477,  493,  498,  489,  533,  490,
      497,  496,  503,  503,  496,  286,    0,  418,  553,    0,
      519,    0,  524,  527,  529,  533,  552,  537,  537,  547,
      541,  542,  549,    0,    0,    0,  548,  564,  561,  572,
      574,  559,  556,    0,  570,  560,  573,  578,  564,  570,

      577,  583,  579,  588,  600,  591,  590,  588,  598,  598,
      605,  606,  609,  609,  619,  608,  637,  613,  628,  615,
      626,  629,  622,  642,  644,    0,  651,  655,  637,  650,
      655,  654,  648,  655,  650,  652,  656,    0,    0,    0,
      660,    0,  667,  667,  659,    0,  664,  680,  677,  671,
      681,  692,  684,  695,  697,    0,  694,  704,  698,  707,
      706,  709,  709,  699,  712,  720,  722,  710,  712,  718,
      732,  726,  724,  730,  735,  737,  737,  731,  742,  731,
      733,    0,  737,  744,  741,  742,  749,  756,  765,  761,
      762,    0,  758,  759,    0,  768,    0,  760,   90,  762,

      778,    0,  766,  775,  769,  771,  784,  788,  789,  779,
      793,    0,  792,  787,  797,  804,  796,  812,  796,  798,
      814,  808,    0,  810,  818,  814,    0,    0,  813,  826,
      828,    0,  816,  824,  836,  821,  828,  830,  827,  843,
        0,  842,   86,  830,  855,  849,  859,  853,  866,  851,
      849,  865,  871,  870,  872,  870,  876,  875,  865,  874,
      879,  883,    0,  886,    0,  881,  881,  883,  895,    0,
      883,  886,  902,    0,  897,  899,  910,  916,    0,  916,
        0,  909,  912,  914,  913,  925,    0,  931,    0,  917,
      926,  935,    0,  916,  926,  941,  934,  937,  933,  928,

        0,  948,  941,  938,    0,    0,  953,    0,  958,    0,
      960,  964,  959,    0,  966,    0,  961,  958,  960,    0,
      967,  955,  978,  967,  967,  968,  965,  977,  979,  989,
      976,  977,    0,  995,  996, 1001,  994,    0,    0,    0,
      985,    0,    0, 1006,    0, 1009, 1010, 1016,    0, 1015,
     1028, 1017,    0, 1020,    0,    0, 1027,    0, 1018, 1014,
     1017, 1037, 1029, 1020, 1035, 1035, 1046,    0,    0, 1038,
     1039, 1055, 1056, 1044, 1047, 1051, 1052, 1060, 1062, 1054,
     1074, 1071, 1074, 1066, 1079, 1085,    0, 1084, 1076,    0,
     1085, 1081, 1082, 1081, 1094,    0,    0, 1085, 1097, 1088,

     1089, 1104, 1109,    0, 1098, 1118, 1119, 1112, 1109,    0,
     1123, 1125, 1126,    0, 1131, 1132,    0, 1121, 1125,    0,
        0, 1269, 1186, 1197, 1202, 1209, 1220, 1229, 1235, 1246,
     1253, 1260
    } ;

static const flex_int16_t yy_def[533] =
    {   0,
      522,    1,  523,  523,  522,  522,  522,  522,  524,  525,
      522,  522,  522,  522,  522,  522,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  527,  522,  522,  522,  524,  522,
      528,  529,  522,  522,  522,  530,  522,  522,  531,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      524,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  527,  522,  524,
      532,  529,  522,  530,  522,  522,  531,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  522,  526,  524,  524,  522,  522,  522,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  524,  115,  522,  522,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,

      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,    0,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522
    } ;

static const flex_int16_t yy_nxt[1338] =
    {   0,
        6,    7,    8,    9,   10,   11,    6,   12,    6,    6,
       13,   14,   15,   16,   16,   16,   16,   17,   18,   19,
       20,   21,   22,   23,   23,   24,   23,   23,   25,   26,
       27,   28,   23,   23,   23,   29,   30,   31,   32,   33,
       34,   23,    6,   23,   17,   18,   19,   20,   21,   22,
       23,   23,   24,   23,   25,   26,   27,   28,   23,   23,
       23,   29,   30,   31,   32,   33,   34,   23,   36,   36,
       40,   51,   52,   37,   37,   44,   44,   44,   44,   44,
       45,   56,   57,   47,   46,   48,   48,   48,   48,   48,
       47,   58,   48,   48,   48,   48,   48,   51,   52,   53,

      380,   60,   59,   61,   64,  343,   54,   56,   57,   41,
       65,   66,   49,   55,   71,   67,   77,   62,   58,   73,
       68,   69,   85,   72,   76,   40,   53,   60,   59,   74,
       64,   63,   70,   54,   88,   75,   65,   66,   49,   55,
       85,   71,   67,   77,   62,   73,   89,   68,   69,   72,
       76,   80,   80,   80,   80,   40,   74,   63,   70,   90,
       88,   75,   38,   79,   41,   44,   44,   44,   44,   44,
       91,   43,   89,   92,   83,   38,   93,   94,   81,   86,
       86,   86,   86,   86,   47,   90,   48,   48,   48,   48,
       48,   95,   96,   97,   41,   99,  100,   91,   98,   92,

      101,   83,   93,   94,   81,  102,  103,  104,  105,  106,
      107,  108,  109,  110,  111,  112,  522,   95,   96,   97,
      113,   99,  100,  522,   98,  522,  522,  101,  522,  119,
      120,  102,  103,  104,  105,  106,  107,  108,  109,  110,
       40,  111,  112,  121,  122,  124,  113,  123,  133,  114,
      114,  114,  114,  116,  116,  119,  120,  117,  117,  117,
      117,  117,   86,   86,   86,   86,   86,  134,  137,  121,
      122,  118,  124,  123,  133,  135,  522,  522,  136,   41,
      138,  522,  143,  139,  522,  140,  144,  141,  145,   40,
      522,  142,  146,  522,  134,  137,  147,  148,  118,  125,

      150,  135,  126,  127,  136,  149,  138,  128,  143,  170,
      139,  129,  140,  144,  141,  145,  130,  131,  142,  146,
      132,  522,  522,  147,  148,  522,  125,  150,   41,  126,
      127,  149,  522,  522,  128,  522,  170,  129,  522,  522,
      522,  522,  130,  131,  522,  522,  132,   50,   50,   50,
       50,   50,  151,  152,   50,  153,  154,   50,   50,  155,
      156,   50,   50,  157,  158,  159,   50,  160,  161,   50,
      162,  163,  164,   50,   50,  165,   50,  522,   50,  151,
      152,   50,  153,  154,   50,   50,  155,  156,   50,  157,
      158,  159,   50,  160,  161,   50,  162,  163,  164,   50,

       50,  165,   50,   40,  117,  117,  117,  117,  117,  171,
      522,  172,  166,  166,  166,  166,  117,  117,  117,  117,
      117,  168,  168,  173,  174,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  522,  171,  172,  175,  522,
      176,  177,   41,   40,  180,  183,  522,  184,  522,  173,
      174,  185,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  178,  181,  175,  176,  177,  186,  187,
      188,  180,  183,  179,  184,  189,  190,  185,  193,  182,
      194,  195,   41,  191,  167,  167,  167,  167,  167,  167,
      178,  181,  192,  196,  186,  187,  188,  197,  208,  179,

      198,  189,  190,  199,  193,  182,  194,  195,  200,  191,
      204,  522,  207,  209,  205,  211,  201,  224,  192,  196,
      212,  218,  202,  210,  197,  208,  198,  219,  221,  199,
      206,  203,  220,  223,  222,  200,  225,  204,  207,  522,
      209,  205,  211,  201,  224,  226,  212,  218,  202,  210,
      213,  228,  214,  219,  215,  221,  206,  203,  220,  223,
      222,  227,  216,  225,  217,  169,  169,  169,  169,  169,
      229,  230,  226,  231,  232,  235,  236,  213,  228,  214,
      233,  215,  234,  237,  238,  239,  240,  227,  216,  241,
      217,  244,  245,  246,  242,  249,  229,  247,  230,  231,

      232,  235,  236,  248,  250,  251,  233,  252,  234,  237,
      238,  243,  239,  240,  253,  254,  241,  244,  245,  257,
      246,  242,  249,  247,  255,  258,  259,  260,  256,  248,
      250,  251,  261,  252,  262,  263,  264,  243,  265,  266,
      253,  254,  267,  522,  268,  273,  257,  522,  272,  274,
      255,  258,  259,  260,  256,  275,  276,  277,  261,  278,
      262,  263,  264,  279,  265,  266,  282,  269,  280,  267,
      268,  270,  273,  271,  272,  274,  281,  522,  283,  284,
      294,  275,  276,  277,  285,  286,  278,  287,  288,  289,
      279,  290,  282,  269,  291,  280,  292,  270,  293,  271,

      295,  296,  299,  281,  283,  297,  284,  294,  298,  300,
      285,  286,  301,  287,  288,  289,  302,  290,  303,  304,
      291,  305,  292,  306,  293,  307,  295,  308,  296,  299,
      309,  297,  310,  312,  298,  311,  300,  313,  301,  314,
      522,  315,  316,  302,  317,  303,  304,  318,  305,  319,
      306,  320,  307,  321,  308,  322,  323,  309,  324,  310,
      312,  311,  325,  333,  313,  326,  314,  315,  316,  327,
      317,  328,  329,  318,  330,  331,  319,  332,  320,  321,
      334,  335,  322,  323,  336,  324,  337,  338,  341,  325,
      333,  326,  339,  340,  342,  327,  344,  328,  329,  345,

      330,  331,  346,  332,  347,  348,  334,  349,  335,  350,
      351,  336,  352,  337,  338,  341,  353,  354,  339,  340,
      342,  355,  344,  356,  357,  358,  345,  359,  346,  360,
      347,  348,  361,  349,  362,  363,  350,  351,  364,  352,
      365,  366,  353,  367,  354,  368,  369,  355,  370,  356,
      357,  371,  358,  359,  372,  373,  360,  374,  361,  375,
      362,  376,  363,  377,  364,  378,  365,  379,  366,  367,
      381,  368,  382,  369,  383,  370,  384,  371,  385,  522,
      372,  388,  373,  374,  389,  375,  390,  376,  391,  377,
      392,  386,  378,  393,  379,  394,  381,  395,  396,  382,

      397,  383,  398,  384,  399,  385,  387,  388,  400,  401,
      389,  402,  403,  390,  404,  391,  405,  392,  386,  406,
      393,  407,  394,  408,  395,  396,  397,  409,  398,  410,
      411,  399,  387,  412,  413,  400,  401,  402,  403,  414,
      404,  415,  416,  405,  417,  406,  418,  407,  419,  421,
      408,  420,  422,  409,  423,  410,  424,  411,  425,  426,
      412,  413,  427,  522,  428,  414,  429,  415,  416,  430,
      417,  431,  432,  418,  433,  419,  421,  420,  434,  422,
      423,  435,  424,  436,  437,  425,  426,  438,  442,  427,
      428,  439,  429,  440,  441,  443,  430,  431,  432,  444,

      450,  433,  445,  446,  447,  434,  448,  449,  435,  451,
      436,  437,  452,  453,  438,  442,  454,  439,  455,  440,
      441,  443,  456,  522,  457,  458,  444,  450,  445,  446,
      447,  459,  448,  449,  460,  461,  451,  462,  452,  453,
      463,  468,  469,  454,  470,  455,  464,  522,  471,  456,
      457,  458,  472,  465,  522,  473,  466,  474,  459,  475,
      476,  460,  461,  467,  462,  477,  478,  463,  468,  469,
      479,  470,  480,  464,  471,  481,  482,  483,  472,  484,
      465,  473,  466,  485,  474,  475,  476,  486,  487,  467,
      488,  477,  478,  489,  490,  491,  492,  479,  480,  493,

      495,  481,  494,  482,  483,  484,  496,  497,  499,  485,
      498,  500,  501,  486,  487,  502,  488,  503,  505,  489,
      490,  504,  491,  492,  506,  507,  493,  495,  494,  508,
      509,  522,  510,  496,  497,  499,  498,  500,  501,  511,
      512,  502,  513,  514,  503,  505,  515,  504,  516,  517,
      506,  507,  518,  519,  522,  520,  508,  509,  510,  521,
      522,  522,  522,  522,  522,  522,  511,  512,  513,  514,
      522,  522,  522,  515,  522,  516,  517,  522,  522,  518,
      519,  520,  522,  522,  522,  521,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   39,  522,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   42,   42,
       42,   42,   42,   50,   50,   50,   50,   50,   50,   50,
       78,  522,   78,  522,   78,   78,   78,   78,   78,   78,
       78,   39,  522,   39,  522,   39,  522,  522,   39,   82,
       82,   82,   82,   82,   82,   82,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   87,   87,   87,
       87,  522,  522,   87,  115,  115,  115,  115,    5,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522
    } ;

static const flex_int16_t yy_chk[1338] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
        9,   17,   18,    3,    4,   13,   13,   13,   13,   13,
       14,   20,   21,   15,   14,   15,   15,   15,   15,   15,
       16,   22,   16,   16,   16,   16,   16,   17,   18,   19,

      343,   24,   22,   25,   26,  299,   19,   20,   21,    9,
       27,   28,   15,   19,   30,   29,   34,   25,   22,   31,
       29,   29,   84,   30,   33,   39,   19,   24,   22,   32,
       26,   25,   29,   19,   51,   32,   27,   28,   15,   19,
       46,   30,   29,   34,   25,   31,   52,   29,   29,   30,
       33,   41,   41,   41,   41,   61,   32,   25,   29,   53,
       51,   32,   38,   37,   39,   44,   44,   44,   44,   44,
       54,   12,   52,   55,   44,    7,   56,   57,   41,   47,
       47,   47,   47,   47,   48,   53,   48,   48,   48,   48,
       48,   58,   59,   60,   61,   62,   63,   54,   60,   55,

       64,   44,   56,   57,   41,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,    5,   58,   59,   60,
       77,   62,   63,    0,   60,    0,    0,   64,    0,   88,
       89,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       80,   75,   76,   90,   91,   93,   77,   92,   95,   80,
       80,   80,   80,   83,   83,   88,   89,   83,   83,   83,
       83,   83,   86,   86,   86,   86,   86,   96,  100,   90,
       91,   86,   93,   92,   95,   97,    0,    0,   99,   80,
      101,    0,  104,  103,    0,  103,  105,  103,  106,  166,
        0,  103,  107,    0,   96,  100,  108,  109,   86,   94,

      111,   97,   94,   94,   99,  110,  101,   94,  104,  119,
      103,   94,  103,  105,  103,  106,   94,   94,  103,  107,
       94,    0,    0,  108,  109,    0,   94,  111,  166,   94,
       94,  110,    0,    0,   94,    0,  119,   94,    0,    0,
        0,    0,   94,   94,    0,    0,   94,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,    0,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  114,  116,  116,  116,  116,  116,  121,
        0,  123,  114,  114,  114,  114,  117,  117,  117,  117,
      117,  118,  118,  124,  125,  118,  118,  118,  118,  118,
      168,  168,  168,  168,  168,    0,  121,  123,  126,    0,
      127,  128,  114,  115,  130,  132,    0,  133,    0,  124,
      125,  134,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  129,  131,  126,  127,  128,  135,  136,
      138,  130,  132,  129,  133,  139,  140,  134,  142,  131,
      143,  145,  115,  141,  115,  115,  115,  115,  115,  115,
      129,  131,  141,  146,  135,  136,  138,  148,  155,  129,

      149,  139,  140,  151,  142,  131,  143,  145,  152,  141,
      153,    0,  154,  156,  153,  157,  152,  165,  141,  146,
      158,  160,  152,  156,  148,  155,  149,  161,  163,  151,
      153,  152,  162,  164,  163,  152,  171,  153,  154,    0,
      156,  153,  157,  152,  165,  173,  158,  160,  152,  156,
      159,  175,  159,  161,  159,  163,  153,  152,  162,  164,
      163,  174,  159,  171,  159,  169,  169,  169,  169,  169,
      176,  177,  173,  178,  179,  181,  182,  159,  175,  159,
      180,  159,  180,  183,  187,  188,  189,  174,  159,  190,
      159,  192,  193,  195,  191,  198,  176,  196,  177,  178,

      179,  181,  182,  197,  199,  200,  180,  201,  180,  183,
      187,  191,  188,  189,  202,  203,  190,  192,  193,  205,
      195,  191,  198,  196,  204,  206,  207,  208,  204,  197,
      199,  200,  209,  201,  210,  211,  212,  191,  213,  214,
      202,  203,  215,    0,  216,  219,  205,    0,  218,  220,
      204,  206,  207,  208,  204,  221,  222,  223,  209,  224,
      210,  211,  212,  225,  213,  214,  229,  217,  227,  215,
      216,  217,  219,  217,  218,  220,  228,    0,  230,  231,
      245,  221,  222,  223,  232,  233,  224,  234,  235,  236,
      225,  237,  229,  217,  241,  227,  243,  217,  244,  217,

      247,  248,  251,  228,  230,  249,  231,  245,  250,  252,
      232,  233,  253,  234,  235,  236,  254,  237,  255,  257,
      241,  258,  243,  259,  244,  260,  247,  261,  248,  251,
      262,  249,  263,  265,  250,  264,  252,  266,  253,  267,
        0,  268,  269,  254,  269,  255,  257,  270,  258,  271,
      259,  272,  260,  273,  261,  274,  275,  262,  276,  263,
      265,  264,  277,  286,  266,  278,  267,  268,  269,  279,
      269,  280,  281,  270,  283,  284,  271,  285,  272,  273,
      287,  288,  274,  275,  289,  276,  290,  291,  296,  277,
      286,  278,  293,  294,  298,  279,  300,  280,  281,  301,

      283,  284,  303,  285,  304,  305,  287,  306,  288,  307,
      308,  289,  309,  290,  291,  296,  310,  311,  293,  294,
      298,  313,  300,  314,  315,  316,  301,  317,  303,  318,
      304,  305,  319,  306,  320,  321,  307,  308,  322,  309,
      324,  325,  310,  326,  311,  329,  330,  313,  331,  314,
      315,  333,  316,  317,  334,  335,  318,  336,  319,  337,
      320,  338,  321,  339,  322,  340,  324,  342,  325,  326,
      344,  329,  345,  330,  346,  331,  347,  333,  348,    0,
      334,  350,  335,  336,  351,  337,  352,  338,  353,  339,
      354,  349,  340,  355,  342,  356,  344,  357,  358,  345,

      359,  346,  360,  347,  361,  348,  349,  350,  362,  364,
      351,  366,  367,  352,  368,  353,  369,  354,  349,  371,
      355,  372,  356,  373,  357,  358,  359,  375,  360,  376,
      377,  361,  349,  378,  380,  362,  364,  366,  367,  382,
      368,  383,  384,  369,  385,  371,  386,  372,  388,  391,
      373,  390,  392,  375,  394,  376,  395,  377,  396,  397,
      378,  380,  398,    0,  399,  382,  400,  383,  384,  402,
      385,  403,  404,  386,  407,  388,  391,  390,  409,  392,
      394,  411,  395,  412,  413,  396,  397,  415,  421,  398,
      399,  417,  400,  418,  419,  422,  402,  403,  404,  423,

      429,  407,  424,  425,  426,  409,  427,  428,  411,  430,
      412,  413,  431,  432,  415,  421,  434,  417,  435,  418,
      419,  422,  436,    0,  437,  441,  423,  429,  424,  425,
      426,  444,  427,  428,  446,  447,  430,  448,  431,  432,
      450,  452,  454,  434,  457,  435,  451,    0,  459,  436,
      437,  441,  460,  451,    0,  461,  451,  462,  444,  463,
      464,  446,  447,  451,  448,  465,  466,  450,  452,  454,
      467,  457,  470,  451,  459,  471,  472,  473,  460,  474,
      451,  461,  451,  475,  462,  463,  464,  476,  477,  451,
      478,  465,  466,  479,  480,  481,  482,  467,  470,  483,

      485,  471,  484,  472,  473,  474,  486,  488,  491,  475,
      489,  492,  493,  476,  477,  494,  478,  495,  499,  479,
      480,  498,  481,  482,  500,  501,  483,  485,  484,  502,
      503,    0,  505,  486,  488,  491,  489,  492,  493,  506,
      507,  494,  508,  509,  495,  499,  511,  498,  512,  513,
      500,  501,  515,  516,    0,  518,  502,  503,  505,  519,
        0,    0,    0,    0,    0,    0,  506,  507,  508,  509,
        0,    0,    0,  511,    0,  512,  513,    0,    0,  515,
      516,  518,    0,    0,    0,  519,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  524,    0,  524,

      524,  524,  524,  524,  524,  524,  524,  524,  525,  525,
      525,  525,  525,  526,  526,  526,  526,  526,  526,  526,
      527,    0,  527,    0,  527,  527,  527,  527,  527,  527,
      527,  528,    0,  528,    0,  528,    0,    0,  528,  529,
      529,  529,  529,  529,  529,  529,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  531,  531,  531,
      531,    0,    0,  531,  532,  532,  532,  532,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
#define YY_NO_UNISTD_H 1
#line 4 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
#include "platform.h"

#include <stdlib.h>
#include <string.h>
#include "hidlcomp.h"           
#include "hidlgram.h"

#define register

extern YYSTYPE yylval;
extern unsigned linenum;

static enum { LSskip,LSclarion,LSsectionheader,LSsectionbody,LSsectionfooter} state=LSskip;
static int   opencurly=0;

static bool check_return(int);
static void output_text();
#line 932 "/home/sathvik/hpcc/HPCC-Platform/build/tools/hidl/hidllex.cpp"

#line 934 "/home/sathvik/hpcc/HPCC-Platform/build/tools/hidl/hidllex.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 34 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"


#line 1155 "/home/sathvik/hpcc/HPCC-Platform/build/tools/hidl/hidllex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 523 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1269 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 36 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ linenum++; output_text(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 38 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ output_text(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 40 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( MODULE )) return MODULE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 41 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( SCMEXPORTDEF )) return SCMEXPORTDEF; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 42 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( SCMAPI )) return SCMAPI; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 43 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( SCMINTERFACE )) return SCMINTERFACE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 44 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( SCMENUM )) return SCMENUM; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 45 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( SCMCLARION )) return SCMCLARION; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 46 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( SCMEND )) return SCMEND; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 47 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( ESPDEFEXPORT )) return ESPDEFEXPORT;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 48 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( ESPSTRUCT )) return ESPSTRUCTREF; else return ESPSTRUCT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 49 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( ESPENUM )) return ESPENUMREF; else return ESPENUM;       }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 50 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( ESPREQUEST )) return ESPREQUEST; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 51 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( ESPRESPONSE )) return ESPRESPONSE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 52 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( ESPSERVICE )) return ESPSERVICE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 53 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( ESPMETHOD )) return ESPMETHODREF; else return ESPMETHOD; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 54 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( ESPMOUNT )) return ESPMOUNT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 55 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ yylval.setName((const char *) yytext); if (check_return( ESPTEMPLATE )) return ESPTEMPLATE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 56 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( ESPINCLUDE )) return ESPINCLUDE; } //Kevin
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 57 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( ESPVERSIONDEF )) return ESPVERSIONDEF; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 58 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _CONST )) return _CONST; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 59 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _VOID )) return _VOID; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 60 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _CHAR )) return _CHAR; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 61 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _BOOL )) return _BOOL; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 62 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _INT )) return _INT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 63 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _UNSIGNED )) return _UNSIGNED; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 64 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _SHORT )) return _SHORT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 65 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _LONG )) return _LONG; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 66 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _FLOAT )) return _FLOAT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 67 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _DOUBLE )) return _DOUBLE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 68 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _IN )) return _IN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 69 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _OUT )) return _OUT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 70 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( INOUT )) return INOUT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 71 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _SIZE )) return _SIZE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 72 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( LAYOUT )) return LAYOUT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 73 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( ASYNC )) return ASYNC; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 74 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( _CALLBACK )) return _CALLBACK; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 75 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( VIRTUAL )) return VIRTUAL; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 76 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return( TIMEOUT )) return TIMEOUT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return( STRING )) return STRING; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 80 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 81 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 82 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 83 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 84 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 85 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 86 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 87 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 88 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 89 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 90 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 91 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 92 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 93 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 94 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 95 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 96 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 97 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 98 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 99 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 100 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 101 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 102 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 103 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 104 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 105 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 106 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 107 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 108 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 109 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;} 
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 110 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 111 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;} 
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 112 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 113 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 114 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 115 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 116 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;} 
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 117 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 118 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 119 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{yylval.setName((const char *) yytext); if (check_return(XSDTYPE)) return XSDTYPE;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 121 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ 
    if (check_return( BOOL_CONST ))
    {
        yylval.setVal(1);
        return BOOL_CONST; 
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 129 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{
    if (check_return( BOOL_CONST )) 
    {
        yylval.setVal(0);
        return BOOL_CONST; 
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ 
    if (check_return( STRING_CONST ))
    {
        char *sval = (char *) malloc(yyleng+1);     
        char *thestr=(char*)yytext;
        
        /* handle escape: esc \\([abfnrtv"'?\\]|[0-7]{1,3}|x[0-9a-fA-F]+) */
        char* p;
        char* tgt;
        for (p = thestr, tgt=sval; *p!=0; p++) 
        {
            if (*p=='\\')
            {
                p++;
                switch(*p)
                {
                    case '\\': 
                    case '"': *tgt = *p; tgt++; break;
                    case '\0': yyerror("Can not end string with a single '\\'"); break;
                    case '\'': yyerror("Single quote (') does not need to be escaped"); break;
                    case 'n': *tgt=0xD; tgt++; break;
                    case 'r': *tgt=0xA; tgt++; break;
                    default: { VStrBuffer tmp("Unsupported/invalid escape: \\%c",*p); yyerror(tmp.str()); }
                }
            }
            else
            {
                *tgt = *p; 
                tgt++; 
            }
        }
        *tgt = 0;

        yylval.setVal(sval);
        
        return STRING_CONST; 
    }
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 176 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{
                yylval.setVal((int)strtol((const char *)yytext, NULL, 16));
                if (check_return(INTEGER_CONST)) return INTEGER_CONST;
                }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 181 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ yylval.setVal(atoi ((const char *)yytext)); 
              if (check_return(INTEGER_CONST)) return INTEGER_CONST; 
            }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ yylval.setVal(atof((const char *)yytext)); 
              if (check_return(DOUBLE_CONST)) return DOUBLE_CONST; 
            }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 189 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ yylval.setVal(atof((const char *)yytext)); 
              if (check_return(DOUBLE_CONST)) return DOUBLE_CONST; 
            }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 194 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{  yylval.setName((const char *) yytext);
                       if (check_return(ID)) return ID;
                    }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 198 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{  yylval.setName((const char *) yytext+1);
                       if (check_return(CONST_ID)) return CONST_ID;
                    }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 202 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return(STAR)) return STAR; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 203 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return(UMBERSAND)) return UMBERSAND; }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 204 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (state==LSskip) outs((const char*)yytext); 
              linenum++;
            }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 207 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ BEGIN(COMMENT); nCommentStartLine = linenum; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 208 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ BEGIN(0); nCommentStartLine = -1; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 209 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 210 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ linenum++;  }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 211 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 213 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ yyerror("No comment has started; \"*/\" is illegal"); }                   
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 216 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
{ if (check_return(yytext[0])) return yytext[0]; 
            }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 219 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"
ECHO;
	YY_BREAK
#line 1780 "/home/sathvik/hpcc/HPCC-Platform/build/tools/hidl/hidllex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 523 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 523 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 522);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 219 "/home/sathvik/hpcc/HPCC-Platform/tools/hidl/hidllex.l"


#line 222 "hidllex.l"

bool check_return(int a)
{
    if (state==LSskip) 
   {
      if (isSCM)
      {
         switch(a)
         {
                case SCMINTERFACE:
                case SCMENUM:
                    state = LSsectionheader;
                    return true;

                case ESPMETHOD:
                case ESPSTRUCT:
                case ESPENUM:
                    state = LSsectionheader;
                    return false;

                case ESPREQUEST:
                case ESPRESPONSE:
                case ESPSERVICE:
                    state = LSsectionheader;
                    return true;
                case SCMAPI:
                case SCMEXPORTDEF:
                case ESPDEFEXPORT:
                case ESPINCLUDE:
                case ESPVERSIONDEF:
                    state = LSsectionfooter;
                    return true;
                case SCMCLARION:
                    state = LSclarion;
                    return false;
                default:
                    output_text();
                    return false;
            }
        }
        else
        {
         switch(a)
         {
                case MODULE:
                case SCMINTERFACE:
                    state = LSsectionheader;
                    return true;
                default:
                    output_text();
                    return false;
            }
        }
    }
    else if (state==LSclarion) 
   {
        if (a == SCMEND)
        {
            state = LSskip;
        } 
        else 
            output_text();
        return false;
    }
    if (a == '{')
    {
        opencurly++;
        if (state==LSsectionheader) 
            state = LSsectionbody;
    }
    else if (a == '}')
    {
        opencurly--;
        if (!opencurly && (state==LSsectionbody))
        {
            state = LSsectionfooter;
        }
    }
    else if ((a == ';')&&(state == LSsectionfooter))
        state = LSskip;

    return true;
}

#ifdef FLEX_SCANNER
int yywrap()
{
    return -1;
}
#endif

void output_text()
{
    if (state==LSclarion) {
        if (yytext[0]=='\n')
            clarion.append("\r");  
        clarion = clarion.append((const char*)yytext);
    }
    else if (state==LSskip)
        outs((const char*)yytext);
}

