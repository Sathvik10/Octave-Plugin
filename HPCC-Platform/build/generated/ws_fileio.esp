// *** Source file generated by HIDL Version 1.3 from ws_fileio.ecm ***
// *** Not to be hand edited (changes will be lost on re-generation) ***

#ifndef ws_fileio_ESPGEN_INCLUDED
#define ws_fileio_ESPGEN_INCLUDED

#include "ws_fileio_esp.ipp"

#ifdef _WIN32
#include "edwin.h"
#include <process.h>
#endif



//=======================================================
// class CCreateFileRequest Implementation
//=======================================================

CCreateFileRequest::CCreateFileRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_DestDropZone(nilIgnore),m_DestRelativePath(nilIgnore),m_Overwrite(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("CreateFileRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CCreateFileRequest::CCreateFileRequest(const char *serviceName, const char *bc)
	: m_DestDropZone(nilIgnore),m_DestRelativePath(nilIgnore),m_Overwrite(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("CreateFileRequest");
}

CCreateFileRequest::CCreateFileRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DestDropZone(nilIgnore),m_DestRelativePath(nilIgnore),m_Overwrite(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("CreateFileRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CCreateFileRequest::CCreateFileRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DestDropZone(nilIgnore),m_DestRelativePath(nilIgnore),m_Overwrite(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("CreateFileRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CCreateFileRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestDropZone\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestRelativePath\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Overwrite\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CCreateFileRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CCreateFileRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CCreateFileRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestDropZone");
	form.appendf("  <tr><td><b>DestDropZone: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestRelativePath");
	form.appendf("  <tr><td><b>DestRelativePath: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Overwrite");
	
	form.appendf("  <tr><td><b>Overwrite? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CCreateFileRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CCreateFileRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_DestDropZone.marshall(rpc_resp, "DestDropZone", "", "", "");
	m_DestRelativePath.marshall(rpc_resp, "DestRelativePath", "", "", "");
	m_Overwrite.marshall(rpc_resp, "Overwrite", "", "", "");
}


void CCreateFileRequest::copy(CCreateFileRequest &from)
{
	m_DestDropZone.copy(from.m_DestDropZone);
	m_DestRelativePath.copy(from.m_DestRelativePath);
	m_Overwrite.copy(from.m_Overwrite);
}


void CCreateFileRequest::copy(IConstCreateFileRequest &ifrom)
{
	setDestDropZone(ifrom.getDestDropZone());
	setDestRelativePath(ifrom.getDestRelativePath());
	setOverwrite(ifrom.getOverwrite());
}


void CCreateFileRequest::getAttributes(IProperties &attributes)
{
}


void CCreateFileRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_DestDropZone.toStr(ctx, buffer, "DestDropZone", "", true, "", "");
	m_DestRelativePath.toStr(ctx, buffer, "DestRelativePath", "", true, "", "");
	m_Overwrite.toStr(ctx, buffer, "Overwrite", "", true, "", "");
}


void CCreateFileRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CCreateFileRequest::serializer(IEspContext* ctx, IConstCreateFileRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<CreateFileRequest>");
	// field DestDropZone
	{
		const char* s = src.getDestDropZone();
		if (s && *s)
		{
			buffer.append("<DestDropZone>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestDropZone>");
		}
	}
	// field DestRelativePath
	{
		const char* s = src.getDestRelativePath();
		if (s && *s)
		{
			buffer.append("<DestRelativePath>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestRelativePath>");
		}
	}
	// field Overwrite
	{
		bool b = src.getOverwrite();
		if (b)
			buffer.appendf("<Overwrite>1</Overwrite>");
	}
	if (keepRootTag)
		buffer.append("</CreateFileRequest>");
}

bool CCreateFileRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_DestDropZone.unmarshall(rpc_request, "DestDropZone", basepath);
	hasValue |= m_DestRelativePath.unmarshall(rpc_request, "DestRelativePath", basepath);
	hasValue |= m_Overwrite.unmarshall(rpc_request, "Overwrite", basepath);
	return hasValue;
}

bool CCreateFileRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DestDropZone.unmarshall(ctx, soapval, "DestDropZone");
	hasValue |= m_DestRelativePath.unmarshall(ctx, soapval, "DestRelativePath");
	hasValue |= m_Overwrite.unmarshall(ctx, soapval, "Overwrite");
	return hasValue;
}

bool CCreateFileRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DestDropZone.unmarshall(ctx, params, attachments, "DestDropZone", basepath);
	hasValue |= m_DestRelativePath.unmarshall(ctx, params, attachments, "DestRelativePath", basepath);
	hasValue |= m_Overwrite.unmarshall(ctx, params, attachments, "Overwrite", basepath);
	return hasValue;
}

const char * CCreateFileRequest::getDestDropZone() { return m_DestDropZone.query();}
const char * CCreateFileRequest::getDestRelativePath() { return m_DestRelativePath.query();}
bool CCreateFileRequest::getOverwrite() { return m_Overwrite;}
void CCreateFileRequest::setDestDropZone(const char * val){ m_DestDropZone.set(val); }
void CCreateFileRequest::setDestRelativePath(const char * val){ m_DestRelativePath.set(val); }
void CCreateFileRequest::setOverwrite(bool val){ m_Overwrite=val; }
extern "C"  IEspCreateFileRequest *createCreateFileRequest(const char *serv){return ((IEspCreateFileRequest *)new CCreateFileRequest(serv));}
extern "C"  IClientCreateFileRequest *createClientCreateFileRequest(const char *serv){return ((IClientCreateFileRequest *)new CCreateFileRequest(serv));}

//=======================================================
// class CCreateFileResponse Implementation
//=======================================================

CCreateFileResponse::CCreateFileResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DestDropZone(nilRemove),m_DestRelativePath(nilRemove),m_Overwrite(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("CreateFileResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CCreateFileResponse::CCreateFileResponse(const char *serviceName, const char *bc)
	: m_DestDropZone(nilRemove),m_DestRelativePath(nilRemove),m_Overwrite(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("CreateFileResponse");
}

CCreateFileResponse::CCreateFileResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DestDropZone(nilRemove),m_DestRelativePath(nilRemove),m_Overwrite(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("CreateFileResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CCreateFileResponse::CCreateFileResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DestDropZone(nilRemove),m_DestRelativePath(nilRemove),m_Overwrite(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("CreateFileResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CCreateFileResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestDropZone\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestRelativePath\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Overwrite\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CCreateFileResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CCreateFileResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CCreateFileResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestDropZone");
	form.appendf("  <tr><td><b>DestDropZone: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestRelativePath");
	form.appendf("  <tr><td><b>DestRelativePath: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Overwrite");
	
	form.appendf("  <tr><td><b>Overwrite? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CCreateFileResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CCreateFileResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DestDropZone.marshall(rpc_resp, "DestDropZone", "", "", "");
		m_DestRelativePath.marshall(rpc_resp, "DestRelativePath", "", "", "");
		m_Overwrite.marshall(rpc_resp, "Overwrite", "", "", "");
		m_Result.marshall(rpc_resp, "Result", "", "", "");
	}
}


void CCreateFileResponse::copy(CCreateFileResponse &from)
{
	m_DestDropZone.copy(from.m_DestDropZone);
	m_DestRelativePath.copy(from.m_DestRelativePath);
	m_Overwrite.copy(from.m_Overwrite);
	m_Result.copy(from.m_Result);
}


void CCreateFileResponse::copy(IConstCreateFileResponse &ifrom)
{
	setDestDropZone(ifrom.getDestDropZone());
	setDestRelativePath(ifrom.getDestRelativePath());
	setOverwrite(ifrom.getOverwrite());
	setResult(ifrom.getResult());
}


void CCreateFileResponse::getAttributes(IProperties &attributes)
{
}


void CCreateFileResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_DestDropZone.toStr(ctx, buffer, "DestDropZone", "", true, "", "");
		m_DestRelativePath.toStr(ctx, buffer, "DestRelativePath", "", true, "", "");
		m_Overwrite.toStr(ctx, buffer, "Overwrite", "", true, "", "");
		m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
	}
}


void CCreateFileResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CCreateFileResponse::serializer(IEspContext* ctx, IConstCreateFileResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<CreateFileResponse>");
	// field DestDropZone
	{
		const char* s = src.getDestDropZone();
		if (s && *s)
		{
			buffer.append("<DestDropZone>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestDropZone>");
		}
	}
	// field DestRelativePath
	{
		const char* s = src.getDestRelativePath();
		if (s && *s)
		{
			buffer.append("<DestRelativePath>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestRelativePath>");
		}
	}
	// field Overwrite
	{
		bool b = src.getOverwrite();
		if (b)
			buffer.appendf("<Overwrite>1</Overwrite>");
	}
	// field Result
	{
		const char* s = src.getResult();
		if (s && *s)
		{
			buffer.append("<Result>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Result>");
		}
	}
	if (keepRootTag)
		buffer.append("</CreateFileResponse>");
}

bool CCreateFileResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DestDropZone.unmarshall(rpc_request, "DestDropZone", basepath);
		hasValue |= m_DestRelativePath.unmarshall(rpc_request, "DestRelativePath", basepath);
		hasValue |= m_Overwrite.unmarshall(rpc_request, "Overwrite", basepath);
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	}
	return hasValue;
}

bool CCreateFileResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DestDropZone.unmarshall(ctx, soapval, "DestDropZone");
	hasValue |= m_DestRelativePath.unmarshall(ctx, soapval, "DestRelativePath");
	hasValue |= m_Overwrite.unmarshall(ctx, soapval, "Overwrite");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CCreateFileResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DestDropZone.unmarshall(ctx, params, attachments, "DestDropZone", basepath);
	hasValue |= m_DestRelativePath.unmarshall(ctx, params, attachments, "DestRelativePath", basepath);
	hasValue |= m_Overwrite.unmarshall(ctx, params, attachments, "Overwrite", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const char * CCreateFileResponse::getDestDropZone() { return m_DestDropZone.query();}
const char * CCreateFileResponse::getDestRelativePath() { return m_DestRelativePath.query();}
bool CCreateFileResponse::getOverwrite_isNull(){return m_Overwrite.is_nil();}
bool CCreateFileResponse::getOverwrite() { return m_Overwrite;}
const char * CCreateFileResponse::getResult() { return m_Result.query();}
void CCreateFileResponse::setDestDropZone(const char * val){ m_DestDropZone.set(val); }
void CCreateFileResponse::setDestRelativePath(const char * val){ m_DestRelativePath.set(val); }
void CCreateFileResponse::setOverwrite_null(){ m_Overwrite.Nil(); }void CCreateFileResponse::setOverwrite(bool val){ m_Overwrite=val; }
void CCreateFileResponse::setResult(const char * val){ m_Result.set(val); }
extern "C"  IEspCreateFileResponse *createCreateFileResponse(const char *serv){return ((IEspCreateFileResponse *)new CCreateFileResponse(serv));}
extern "C"  IClientCreateFileResponse *createClientCreateFileResponse(const char *serv){return ((IClientCreateFileResponse *)new CCreateFileResponse(serv));}

//=======================================================
// class CWriteFileDataRequest Implementation
//=======================================================

CWriteFileDataRequest::CWriteFileDataRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_Data(nilIgnore),m_DestDropZone(nilIgnore),m_DestRelativePath(nilIgnore),m_Offset(0, nilIgnore,false),m_Append(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WriteFileDataRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWriteFileDataRequest::CWriteFileDataRequest(const char *serviceName, const char *bc)
	: m_Data(nilIgnore),m_DestDropZone(nilIgnore),m_DestRelativePath(nilIgnore),m_Offset(0, nilIgnore,false),m_Append(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WriteFileDataRequest");
}

CWriteFileDataRequest::CWriteFileDataRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Data(nilIgnore),m_DestDropZone(nilIgnore),m_DestRelativePath(nilIgnore),m_Offset(0, nilIgnore,false),m_Append(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WriteFileDataRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWriteFileDataRequest::CWriteFileDataRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Data(nilIgnore),m_DestDropZone(nilIgnore),m_DestRelativePath(nilIgnore),m_Offset(0, nilIgnore,false),m_Append(0, nilIgnore,false)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WriteFileDataRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWriteFileDataRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Data\" type=\"xsd:base64Binary\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestDropZone\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestRelativePath\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Offset\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" default=\"false\" name=\"Append\" type=\"xsd:boolean\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWriteFileDataRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWriteFileDataRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWriteFileDataRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Data");
	form.appendf("  <tr><td><b>Data: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestDropZone");
	form.appendf("  <tr><td><b>DestDropZone: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestRelativePath");
	form.appendf("  <tr><td><b>DestRelativePath: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Offset");
	form.appendf("  <tr><td><b>Offset: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Append");
	
	form.appendf("  <tr><td><b>Append? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWriteFileDataRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWriteFileDataRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_Data.marshall(rpc_resp, "Data", "", "", "");
	m_DestDropZone.marshall(rpc_resp, "DestDropZone", "", "", "");
	m_DestRelativePath.marshall(rpc_resp, "DestRelativePath", "", "", "");
	m_Offset.marshall(rpc_resp, "Offset", "", "", "");
	m_Append.marshall(rpc_resp, "Append", "", "", "");
}


void CWriteFileDataRequest::copy(CWriteFileDataRequest &from)
{
	m_Data.copy(from.m_Data);
	m_DestDropZone.copy(from.m_DestDropZone);
	m_DestRelativePath.copy(from.m_DestRelativePath);
	m_Offset.copy(from.m_Offset);
	m_Append.copy(from.m_Append);
}


void CWriteFileDataRequest::copy(IConstWriteFileDataRequest &ifrom)
{
	setData(ifrom.getData());
	setDestDropZone(ifrom.getDestDropZone());
	setDestRelativePath(ifrom.getDestRelativePath());
	setOffset(ifrom.getOffset());
	setAppend(ifrom.getAppend());
}


void CWriteFileDataRequest::getAttributes(IProperties &attributes)
{
}


void CWriteFileDataRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_Data.toStr(ctx, buffer, "Data", "", true, "", "");
	m_DestDropZone.toStr(ctx, buffer, "DestDropZone", "", true, "", "");
	m_DestRelativePath.toStr(ctx, buffer, "DestRelativePath", "", true, "", "");
	m_Offset.toStr(ctx, buffer, "Offset", "", true, "", "");
	m_Append.toStr(ctx, buffer, "Append", "", true, "", "");
}


void CWriteFileDataRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWriteFileDataRequest::serializer(IEspContext* ctx, IConstWriteFileDataRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WriteFileDataRequest>");
	// field Data
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getData().toByteArray(), src.getData().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<Data>%s</Data>",tmp.str());
	}
	// field DestDropZone
	{
		const char* s = src.getDestDropZone();
		if (s && *s)
		{
			buffer.append("<DestDropZone>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestDropZone>");
		}
	}
	// field DestRelativePath
	{
		const char* s = src.getDestRelativePath();
		if (s && *s)
		{
			buffer.append("<DestRelativePath>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestRelativePath>");
		}
	}
	// field Offset
	{
		//*** default kind: TK_INT; type=int64, name=Offset
		buffer.append("<Offset>");
		buffer.append(src.getOffset());
		buffer.append("</Offset>");
	}
	// field Append
	{
		bool b = src.getAppend();
		if (b)
			buffer.appendf("<Append>1</Append>");
	}
	if (keepRootTag)
		buffer.append("</WriteFileDataRequest>");
}

bool CWriteFileDataRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_Data.unmarshall(rpc_request, "Data", basepath);
	hasValue |= m_DestDropZone.unmarshall(rpc_request, "DestDropZone", basepath);
	hasValue |= m_DestRelativePath.unmarshall(rpc_request, "DestRelativePath", basepath);
	hasValue |= m_Offset.unmarshall(rpc_request, "Offset", basepath);
	hasValue |= m_Append.unmarshall(rpc_request, "Append", basepath);
	return hasValue;
}

bool CWriteFileDataRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Data.unmarshall(ctx, soapval, "Data");
	hasValue |= m_DestDropZone.unmarshall(ctx, soapval, "DestDropZone");
	hasValue |= m_DestRelativePath.unmarshall(ctx, soapval, "DestRelativePath");
	hasValue |= m_Offset.unmarshall(ctx, soapval, "Offset");
	hasValue |= m_Append.unmarshall(ctx, soapval, "Append");
	return hasValue;
}

bool CWriteFileDataRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Data.unmarshall(ctx, params, attachments, "Data", basepath);
	hasValue |= m_DestDropZone.unmarshall(ctx, params, attachments, "DestDropZone", basepath);
	hasValue |= m_DestRelativePath.unmarshall(ctx, params, attachments, "DestRelativePath", basepath);
	hasValue |= m_Offset.unmarshall(ctx, params, attachments, "Offset", basepath);
	hasValue |= m_Append.unmarshall(ctx, params, attachments, "Append", basepath);
	return hasValue;
}

const MemoryBuffer & CWriteFileDataRequest::getData() { return m_Data.getValue();}
const char * CWriteFileDataRequest::getDestDropZone() { return m_DestDropZone.query();}
const char * CWriteFileDataRequest::getDestRelativePath() { return m_DestRelativePath.query();}
__int64 CWriteFileDataRequest::getOffset() { return m_Offset;}
bool CWriteFileDataRequest::getAppend() { return m_Append;}
void CWriteFileDataRequest::setData(const MemoryBuffer & val){ m_Data->clear().append(val); }
void CWriteFileDataRequest::setDestDropZone(const char * val){ m_DestDropZone.set(val); }
void CWriteFileDataRequest::setDestRelativePath(const char * val){ m_DestRelativePath.set(val); }
void CWriteFileDataRequest::setOffset(__int64 val){ m_Offset=val; }
void CWriteFileDataRequest::setAppend(bool val){ m_Append=val; }
extern "C"  IEspWriteFileDataRequest *createWriteFileDataRequest(const char *serv){return ((IEspWriteFileDataRequest *)new CWriteFileDataRequest(serv));}
extern "C"  IClientWriteFileDataRequest *createClientWriteFileDataRequest(const char *serv){return ((IClientWriteFileDataRequest *)new CWriteFileDataRequest(serv));}

//=======================================================
// class CWriteFileDataResponse Implementation
//=======================================================

CWriteFileDataResponse::CWriteFileDataResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_DestDropZone(nilRemove),m_DestRelativePath(nilRemove),m_Offset(nilRemove),m_Append(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WriteFileDataResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWriteFileDataResponse::CWriteFileDataResponse(const char *serviceName, const char *bc)
	: m_DestDropZone(nilRemove),m_DestRelativePath(nilRemove),m_Offset(nilRemove),m_Append(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WriteFileDataResponse");
}

CWriteFileDataResponse::CWriteFileDataResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DestDropZone(nilRemove),m_DestRelativePath(nilRemove),m_Offset(nilRemove),m_Append(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WriteFileDataResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWriteFileDataResponse::CWriteFileDataResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DestDropZone(nilRemove),m_DestRelativePath(nilRemove),m_Offset(nilRemove),m_Append(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WriteFileDataResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWriteFileDataResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestDropZone\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestRelativePath\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Offset\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Append\" type=\"xsd:boolean\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CWriteFileDataResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWriteFileDataResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWriteFileDataResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestDropZone");
	form.appendf("  <tr><td><b>DestDropZone: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestRelativePath");
	form.appendf("  <tr><td><b>DestRelativePath: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Offset");
	form.appendf("  <tr><td><b>Offset: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Append");
	
	form.appendf("  <tr><td><b>Append? </b></td><td><input type=\"checkbox\" name=\"%s\" value=\"1\"  /></td></tr>\n", extfix.str());
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWriteFileDataResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWriteFileDataResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_DestDropZone.marshall(rpc_resp, "DestDropZone", "", "", "");
		m_DestRelativePath.marshall(rpc_resp, "DestRelativePath", "", "", "");
		m_Offset.marshall(rpc_resp, "Offset", "", "", "");
		m_Append.marshall(rpc_resp, "Append", "", "", "");
		m_Result.marshall(rpc_resp, "Result", "", "", "");
	}
}


void CWriteFileDataResponse::copy(CWriteFileDataResponse &from)
{
	m_DestDropZone.copy(from.m_DestDropZone);
	m_DestRelativePath.copy(from.m_DestRelativePath);
	m_Offset.copy(from.m_Offset);
	m_Append.copy(from.m_Append);
	m_Result.copy(from.m_Result);
}


void CWriteFileDataResponse::copy(IConstWriteFileDataResponse &ifrom)
{
	setDestDropZone(ifrom.getDestDropZone());
	setDestRelativePath(ifrom.getDestRelativePath());
	setOffset(ifrom.getOffset());
	setAppend(ifrom.getAppend());
	setResult(ifrom.getResult());
}


void CWriteFileDataResponse::getAttributes(IProperties &attributes)
{
}


void CWriteFileDataResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_DestDropZone.toStr(ctx, buffer, "DestDropZone", "", true, "", "");
		m_DestRelativePath.toStr(ctx, buffer, "DestRelativePath", "", true, "", "");
		m_Offset.toStr(ctx, buffer, "Offset", "", true, "", "");
		m_Append.toStr(ctx, buffer, "Append", "", true, "", "");
		m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
	}
}


void CWriteFileDataResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWriteFileDataResponse::serializer(IEspContext* ctx, IConstWriteFileDataResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WriteFileDataResponse>");
	// field DestDropZone
	{
		const char* s = src.getDestDropZone();
		if (s && *s)
		{
			buffer.append("<DestDropZone>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestDropZone>");
		}
	}
	// field DestRelativePath
	{
		const char* s = src.getDestRelativePath();
		if (s && *s)
		{
			buffer.append("<DestRelativePath>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestRelativePath>");
		}
	}
	// field Offset
	{
		//*** default kind: TK_INT; type=int64, name=Offset
		buffer.append("<Offset>");
		buffer.append(src.getOffset());
		buffer.append("</Offset>");
	}
	// field Append
	{
		bool b = src.getAppend();
		if (b)
			buffer.appendf("<Append>1</Append>");
	}
	// field Result
	{
		const char* s = src.getResult();
		if (s && *s)
		{
			buffer.append("<Result>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Result>");
		}
	}
	if (keepRootTag)
		buffer.append("</WriteFileDataResponse>");
}

bool CWriteFileDataResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_DestDropZone.unmarshall(rpc_request, "DestDropZone", basepath);
		hasValue |= m_DestRelativePath.unmarshall(rpc_request, "DestRelativePath", basepath);
		hasValue |= m_Offset.unmarshall(rpc_request, "Offset", basepath);
		hasValue |= m_Append.unmarshall(rpc_request, "Append", basepath);
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	}
	return hasValue;
}

bool CWriteFileDataResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DestDropZone.unmarshall(ctx, soapval, "DestDropZone");
	hasValue |= m_DestRelativePath.unmarshall(ctx, soapval, "DestRelativePath");
	hasValue |= m_Offset.unmarshall(ctx, soapval, "Offset");
	hasValue |= m_Append.unmarshall(ctx, soapval, "Append");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CWriteFileDataResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DestDropZone.unmarshall(ctx, params, attachments, "DestDropZone", basepath);
	hasValue |= m_DestRelativePath.unmarshall(ctx, params, attachments, "DestRelativePath", basepath);
	hasValue |= m_Offset.unmarshall(ctx, params, attachments, "Offset", basepath);
	hasValue |= m_Append.unmarshall(ctx, params, attachments, "Append", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const char * CWriteFileDataResponse::getDestDropZone() { return m_DestDropZone.query();}
const char * CWriteFileDataResponse::getDestRelativePath() { return m_DestRelativePath.query();}
bool CWriteFileDataResponse::getOffset_isNull(){return m_Offset.is_nil();}
__int64 CWriteFileDataResponse::getOffset() { return m_Offset;}
bool CWriteFileDataResponse::getAppend_isNull(){return m_Append.is_nil();}
bool CWriteFileDataResponse::getAppend() { return m_Append;}
const char * CWriteFileDataResponse::getResult() { return m_Result.query();}
void CWriteFileDataResponse::setDestDropZone(const char * val){ m_DestDropZone.set(val); }
void CWriteFileDataResponse::setDestRelativePath(const char * val){ m_DestRelativePath.set(val); }
void CWriteFileDataResponse::setOffset_null(){ m_Offset.Nil(); }void CWriteFileDataResponse::setOffset(__int64 val){ m_Offset=val; }
void CWriteFileDataResponse::setAppend_null(){ m_Append.Nil(); }void CWriteFileDataResponse::setAppend(bool val){ m_Append=val; }
void CWriteFileDataResponse::setResult(const char * val){ m_Result.set(val); }
extern "C"  IEspWriteFileDataResponse *createWriteFileDataResponse(const char *serv){return ((IEspWriteFileDataResponse *)new CWriteFileDataResponse(serv));}
extern "C"  IClientWriteFileDataResponse *createClientWriteFileDataResponse(const char *serv){return ((IClientWriteFileDataResponse *)new CWriteFileDataResponse(serv));}

//=======================================================
// class CReadFileDataRequest Implementation
//=======================================================

CReadFileDataRequest::CReadFileDataRequest(const char *serviceName, IRpcMessageBinding *init)
	: m_DestDropZone(nilIgnore),m_DestRelativePath(nilIgnore),m_Offset(0, nilIgnore,false),m_DataSize(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ReadFileDataRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CReadFileDataRequest::CReadFileDataRequest(const char *serviceName, const char *bc)
	: m_DestDropZone(nilIgnore),m_DestRelativePath(nilIgnore),m_Offset(0, nilIgnore,false),m_DataSize(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ReadFileDataRequest");
}

CReadFileDataRequest::CReadFileDataRequest(const char *serviceName, IRpcMessage* rpcmsg)
	: m_DestDropZone(nilIgnore),m_DestRelativePath(nilIgnore),m_Offset(0, nilIgnore,false),m_DataSize(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ReadFileDataRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CReadFileDataRequest::CReadFileDataRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_DestDropZone(nilIgnore),m_DestRelativePath(nilIgnore),m_Offset(0, nilIgnore,false),m_DataSize(nilIgnore)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ReadFileDataRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CReadFileDataRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestDropZone\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestRelativePath\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Offset\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DataSize\" type=\"xsd:long\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CReadFileDataRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CReadFileDataRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CReadFileDataRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestDropZone");
	form.appendf("  <tr><td><b>DestDropZone: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestRelativePath");
	form.appendf("  <tr><td><b>DestRelativePath: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Offset");
	form.appendf("  <tr><td><b>Offset: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DataSize");
	form.appendf("  <tr><td><b>DataSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CReadFileDataRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CReadFileDataRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	m_DestDropZone.marshall(rpc_resp, "DestDropZone", "", "", "");
	m_DestRelativePath.marshall(rpc_resp, "DestRelativePath", "", "", "");
	m_Offset.marshall(rpc_resp, "Offset", "", "", "");
	m_DataSize.marshall(rpc_resp, "DataSize", "", "", "");
}


void CReadFileDataRequest::copy(CReadFileDataRequest &from)
{
	m_DestDropZone.copy(from.m_DestDropZone);
	m_DestRelativePath.copy(from.m_DestRelativePath);
	m_Offset.copy(from.m_Offset);
	m_DataSize.copy(from.m_DataSize);
}


void CReadFileDataRequest::copy(IConstReadFileDataRequest &ifrom)
{
	setDestDropZone(ifrom.getDestDropZone());
	setDestRelativePath(ifrom.getDestRelativePath());
	setOffset(ifrom.getOffset());
	setDataSize(ifrom.getDataSize());
}


void CReadFileDataRequest::getAttributes(IProperties &attributes)
{
}


void CReadFileDataRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	m_DestDropZone.toStr(ctx, buffer, "DestDropZone", "", true, "", "");
	m_DestRelativePath.toStr(ctx, buffer, "DestRelativePath", "", true, "", "");
	m_Offset.toStr(ctx, buffer, "Offset", "", true, "", "");
	m_DataSize.toStr(ctx, buffer, "DataSize", "", true, "", "");
}


void CReadFileDataRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CReadFileDataRequest::serializer(IEspContext* ctx, IConstReadFileDataRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ReadFileDataRequest>");
	// field DestDropZone
	{
		const char* s = src.getDestDropZone();
		if (s && *s)
		{
			buffer.append("<DestDropZone>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestDropZone>");
		}
	}
	// field DestRelativePath
	{
		const char* s = src.getDestRelativePath();
		if (s && *s)
		{
			buffer.append("<DestRelativePath>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestRelativePath>");
		}
	}
	// field Offset
	{
		//*** default kind: TK_INT; type=int64, name=Offset
		buffer.append("<Offset>");
		buffer.append(src.getOffset());
		buffer.append("</Offset>");
	}
	// field DataSize
	{
		//*** default kind: TK_INT; type=int64, name=DataSize
		buffer.append("<DataSize>");
		buffer.append(src.getDataSize());
		buffer.append("</DataSize>");
	}
	if (keepRootTag)
		buffer.append("</ReadFileDataRequest>");
}

bool CReadFileDataRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	hasValue |= m_DestDropZone.unmarshall(rpc_request, "DestDropZone", basepath);
	hasValue |= m_DestRelativePath.unmarshall(rpc_request, "DestRelativePath", basepath);
	hasValue |= m_Offset.unmarshall(rpc_request, "Offset", basepath);
	hasValue |= m_DataSize.unmarshall(rpc_request, "DataSize", basepath);
	return hasValue;
}

bool CReadFileDataRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_DestDropZone.unmarshall(ctx, soapval, "DestDropZone");
	hasValue |= m_DestRelativePath.unmarshall(ctx, soapval, "DestRelativePath");
	hasValue |= m_Offset.unmarshall(ctx, soapval, "Offset");
	hasValue |= m_DataSize.unmarshall(ctx, soapval, "DataSize");
	return hasValue;
}

bool CReadFileDataRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_DestDropZone.unmarshall(ctx, params, attachments, "DestDropZone", basepath);
	hasValue |= m_DestRelativePath.unmarshall(ctx, params, attachments, "DestRelativePath", basepath);
	hasValue |= m_Offset.unmarshall(ctx, params, attachments, "Offset", basepath);
	hasValue |= m_DataSize.unmarshall(ctx, params, attachments, "DataSize", basepath);
	return hasValue;
}

const char * CReadFileDataRequest::getDestDropZone() { return m_DestDropZone.query();}
const char * CReadFileDataRequest::getDestRelativePath() { return m_DestRelativePath.query();}
__int64 CReadFileDataRequest::getOffset() { return m_Offset;}
__int64 CReadFileDataRequest::getDataSize() { return m_DataSize;}
void CReadFileDataRequest::setDestDropZone(const char * val){ m_DestDropZone.set(val); }
void CReadFileDataRequest::setDestRelativePath(const char * val){ m_DestRelativePath.set(val); }
void CReadFileDataRequest::setOffset(__int64 val){ m_Offset=val; }
void CReadFileDataRequest::setDataSize(__int64 val){ m_DataSize=val; }
extern "C"  IEspReadFileDataRequest *createReadFileDataRequest(const char *serv){return ((IEspReadFileDataRequest *)new CReadFileDataRequest(serv));}
extern "C"  IClientReadFileDataRequest *createClientReadFileDataRequest(const char *serv){return ((IClientReadFileDataRequest *)new CReadFileDataRequest(serv));}

//=======================================================
// class CReadFileDataResponse Implementation
//=======================================================

CReadFileDataResponse::CReadFileDataResponse(const char *serviceName, IRpcMessageBinding *init)
	: m_Data(nilRemove),m_DestDropZone(nilRemove),m_DestRelativePath(nilRemove),m_Offset(nilRemove),m_DataSize(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ReadFileDataResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CReadFileDataResponse::CReadFileDataResponse(const char *serviceName, const char *bc)
	: m_Data(nilRemove),m_DestDropZone(nilRemove),m_DestRelativePath(nilRemove),m_Offset(nilRemove),m_DataSize(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ReadFileDataResponse");
}

CReadFileDataResponse::CReadFileDataResponse(const char *serviceName, IRpcMessage* rpcmsg)
	: m_Data(nilRemove),m_DestDropZone(nilRemove),m_DestRelativePath(nilRemove),m_Offset(nilRemove),m_DataSize(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ReadFileDataResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CReadFileDataResponse::CReadFileDataResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
	: m_Data(nilRemove),m_DestDropZone(nilRemove),m_DestRelativePath(nilRemove),m_Offset(nilRemove),m_DataSize(nilRemove),m_Result(nilRemove)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("ReadFileDataResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CReadFileDataResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType>\n", msgTypeName);
		}
		if (!(flags & 0x10)) {
			schema.append("<xsd:all>");
		schema.append("<xsd:element name=\"Exceptions\" type=\"tns:ArrayOfEspException\" minOccurs=\"0\" maxOccurs=\"1\"/>");
		}
		schema.append("<xsd:element minOccurs=\"0\" name=\"Data\" type=\"xsd:base64Binary\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestDropZone\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DestRelativePath\" type=\"xsd:string\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Offset\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"DataSize\" type=\"xsd:long\"/>\n");
		schema.append("<xsd:element minOccurs=\"0\" name=\"Result\" type=\"xsd:string\"/>\n");
		if (!(flags & 0x10))
			schema.append("</xsd:all>\n");
		if (flags & 0x01) {
			schema.append("</xsd:complexType></xsd:element>\n");
		}
	}
	return schema;
}

void CReadFileDataResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CReadFileDataResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CReadFileDataResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Data");
	form.appendf("  <tr><td><b>Data: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestDropZone");
	form.appendf("  <tr><td><b>DestDropZone: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DestRelativePath");
	form.appendf("  <tr><td><b>DestRelativePath: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Offset");
	form.appendf("  <tr><td><b>Offset: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("DataSize");
	form.appendf("  <tr><td><b>DataSize: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	extfix.clear();
	if (prefix && *prefix)
		extfix.append(prefix).append(".");
	extfix.append("Result");
	form.appendf("  <tr><td><b>Result: </b></td><td><input type=\"text\" name=\"%s\" size=\"50\" value=\"\" />", extfix.str());
	form.append("</td></tr>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CReadFileDataResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CReadFileDataResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
		m_Data.marshall(rpc_resp, "Data", "", "", "");
		m_DestDropZone.marshall(rpc_resp, "DestDropZone", "", "", "");
		m_DestRelativePath.marshall(rpc_resp, "DestRelativePath", "", "", "");
		m_Offset.marshall(rpc_resp, "Offset", "", "", "");
		m_DataSize.marshall(rpc_resp, "DataSize", "", "", "");
		m_Result.marshall(rpc_resp, "Result", "", "", "");
	}
}


void CReadFileDataResponse::copy(CReadFileDataResponse &from)
{
	m_Data.copy(from.m_Data);
	m_DestDropZone.copy(from.m_DestDropZone);
	m_DestRelativePath.copy(from.m_DestRelativePath);
	m_Offset.copy(from.m_Offset);
	m_DataSize.copy(from.m_DataSize);
	m_Result.copy(from.m_Result);
}


void CReadFileDataResponse::copy(IConstReadFileDataResponse &ifrom)
{
	setData(ifrom.getData());
	setDestDropZone(ifrom.getDestDropZone());
	setDestRelativePath(ifrom.getDestRelativePath());
	setOffset(ifrom.getOffset());
	setDataSize(ifrom.getDataSize());
	setResult(ifrom.getResult());
}


void CReadFileDataResponse::getAttributes(IProperties &attributes)
{
}


void CReadFileDataResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
		m_Data.toStr(ctx, buffer, "Data", "", true, "", "");
		m_DestDropZone.toStr(ctx, buffer, "DestDropZone", "", true, "", "");
		m_DestRelativePath.toStr(ctx, buffer, "DestRelativePath", "", true, "", "");
		m_Offset.toStr(ctx, buffer, "Offset", "", true, "", "");
		m_DataSize.toStr(ctx, buffer, "DataSize", "", true, "", "");
		m_Result.toStr(ctx, buffer, "Result", "", true, "", "");
	}
}


void CReadFileDataResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CReadFileDataResponse::serializer(IEspContext* ctx, IConstReadFileDataResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<ReadFileDataResponse>");
	// field Data
	{
		StringBuffer tmp;
		JBASE64_Encode(src.getData().toByteArray(), src.getData().length(), tmp);
		if (tmp.length()>0)
			buffer.appendf("<Data>%s</Data>",tmp.str());
	}
	// field DestDropZone
	{
		const char* s = src.getDestDropZone();
		if (s && *s)
		{
			buffer.append("<DestDropZone>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestDropZone>");
		}
	}
	// field DestRelativePath
	{
		const char* s = src.getDestRelativePath();
		if (s && *s)
		{
			buffer.append("<DestRelativePath>");
			encodeUtf8XML(s,buffer);
			buffer.append("</DestRelativePath>");
		}
	}
	// field Offset
	{
		//*** default kind: TK_INT; type=int64, name=Offset
		buffer.append("<Offset>");
		buffer.append(src.getOffset());
		buffer.append("</Offset>");
	}
	// field DataSize
	{
		//*** default kind: TK_INT; type=int64, name=DataSize
		buffer.append("<DataSize>");
		buffer.append(src.getDataSize());
		buffer.append("</DataSize>");
	}
	// field Result
	{
		const char* s = src.getResult();
		if (s && *s)
		{
			buffer.append("<Result>");
			encodeUtf8XML(s,buffer);
			buffer.append("</Result>");
		}
	}
	if (keepRootTag)
		buffer.append("</ReadFileDataResponse>");
}

bool CReadFileDataResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
		hasValue |= m_Data.unmarshall(rpc_request, "Data", basepath);
		hasValue |= m_DestDropZone.unmarshall(rpc_request, "DestDropZone", basepath);
		hasValue |= m_DestRelativePath.unmarshall(rpc_request, "DestRelativePath", basepath);
		hasValue |= m_Offset.unmarshall(rpc_request, "Offset", basepath);
		hasValue |= m_DataSize.unmarshall(rpc_request, "DataSize", basepath);
		hasValue |= m_Result.unmarshall(rpc_request, "Result", basepath);
	}
	return hasValue;
}

bool CReadFileDataResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	hasValue |= m_Data.unmarshall(ctx, soapval, "Data");
	hasValue |= m_DestDropZone.unmarshall(ctx, soapval, "DestDropZone");
	hasValue |= m_DestRelativePath.unmarshall(ctx, soapval, "DestRelativePath");
	hasValue |= m_Offset.unmarshall(ctx, soapval, "Offset");
	hasValue |= m_DataSize.unmarshall(ctx, soapval, "DataSize");
	hasValue |= m_Result.unmarshall(ctx, soapval, "Result");
	return hasValue;
}

bool CReadFileDataResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	hasValue |= m_Data.unmarshall(ctx, params, attachments, "Data", basepath);
	hasValue |= m_DestDropZone.unmarshall(ctx, params, attachments, "DestDropZone", basepath);
	hasValue |= m_DestRelativePath.unmarshall(ctx, params, attachments, "DestRelativePath", basepath);
	hasValue |= m_Offset.unmarshall(ctx, params, attachments, "Offset", basepath);
	hasValue |= m_DataSize.unmarshall(ctx, params, attachments, "DataSize", basepath);
	hasValue |= m_Result.unmarshall(ctx, params, attachments, "Result", basepath);
	return hasValue;
}

const MemoryBuffer & CReadFileDataResponse::getData() { return m_Data.getValue();}
const char * CReadFileDataResponse::getDestDropZone() { return m_DestDropZone.query();}
const char * CReadFileDataResponse::getDestRelativePath() { return m_DestRelativePath.query();}
bool CReadFileDataResponse::getOffset_isNull(){return m_Offset.is_nil();}
__int64 CReadFileDataResponse::getOffset() { return m_Offset;}
bool CReadFileDataResponse::getDataSize_isNull(){return m_DataSize.is_nil();}
__int64 CReadFileDataResponse::getDataSize() { return m_DataSize;}
const char * CReadFileDataResponse::getResult() { return m_Result.query();}
void CReadFileDataResponse::setData(const MemoryBuffer & val){ m_Data->clear().append(val); }
void CReadFileDataResponse::setDestDropZone(const char * val){ m_DestDropZone.set(val); }
void CReadFileDataResponse::setDestRelativePath(const char * val){ m_DestRelativePath.set(val); }
void CReadFileDataResponse::setOffset_null(){ m_Offset.Nil(); }void CReadFileDataResponse::setOffset(__int64 val){ m_Offset=val; }
void CReadFileDataResponse::setDataSize_null(){ m_DataSize.Nil(); }void CReadFileDataResponse::setDataSize(__int64 val){ m_DataSize=val; }
void CReadFileDataResponse::setResult(const char * val){ m_Result.set(val); }
extern "C"  IEspReadFileDataResponse *createReadFileDataResponse(const char *serv){return ((IEspReadFileDataResponse *)new CReadFileDataResponse(serv));}
extern "C"  IClientReadFileDataResponse *createClientReadFileDataResponse(const char *serv){return ((IClientReadFileDataResponse *)new CReadFileDataResponse(serv));}

//=======================================================
// class CWsFileIOPingRequest Implementation
//=======================================================

CWsFileIOPingRequest::CWsFileIOPingRequest(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsFileIOPingRequest");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWsFileIOPingRequest::CWsFileIOPingRequest(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsFileIOPingRequest");
}

CWsFileIOPingRequest::CWsFileIOPingRequest(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsFileIOPingRequest");
	unserialize(*rpcmsg,NULL,NULL);
}

CWsFileIOPingRequest::CWsFileIOPingRequest(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsFileIOPingRequest");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWsFileIOPingRequest::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWsFileIOPingRequest::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWsFileIOPingRequest::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWsFileIOPingRequest::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWsFileIOPingRequest::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWsFileIOPingRequest::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

}


void CWsFileIOPingRequest::copy(CWsFileIOPingRequest &from)
{
}


void CWsFileIOPingRequest::copy(IConstWsFileIOPingRequest &ifrom)
{
}


void CWsFileIOPingRequest::getAttributes(IProperties &attributes)
{
}


void CWsFileIOPingRequest::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
}


void CWsFileIOPingRequest::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWsFileIOPingRequest::serializer(IEspContext* ctx, IConstWsFileIOPingRequest &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WsFileIOPingRequest>");
	if (keepRootTag)
		buffer.append("</WsFileIOPingRequest>");
}

bool CWsFileIOPingRequest::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	return hasValue;
}

bool CWsFileIOPingRequest::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWsFileIOPingRequest::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWsFileIOPingRequest *createWsFileIOPingRequest(const char *serv){return ((IEspWsFileIOPingRequest *)new CWsFileIOPingRequest(serv));}
extern "C"  IClientWsFileIOPingRequest *createClientWsFileIOPingRequest(const char *serv){return ((IClientWsFileIOPingRequest *)new CWsFileIOPingRequest(serv));}

//=======================================================
// class CWsFileIOPingResponse Implementation
//=======================================================

CWsFileIOPingResponse::CWsFileIOPingResponse(const char *serviceName, IRpcMessageBinding *init)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsFileIOPingResponse");
	if (init)
	{
		setClientValue(init->getClientValue());
		setReqId(init->getReqId());
		setEventSink(init->getEventSink());
		setState(init->queryState());
		setThunkHandle(init->getThunkHandle());
		setMethod(init->getMethod());
	}
}

CWsFileIOPingResponse::CWsFileIOPingResponse(const char *serviceName, const char *bc)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsFileIOPingResponse");
}

CWsFileIOPingResponse::CWsFileIOPingResponse(const char *serviceName, IRpcMessage* rpcmsg)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsFileIOPingResponse");
	unserialize(*rpcmsg,NULL,NULL);
}

CWsFileIOPingResponse::CWsFileIOPingResponse(IEspContext* ctx, const char *serviceName, IProperties *params, MapStrToBuf *attachments)
{
	m_eventSink=NULL;
	m_RequestState=NULL;
	m_serviceName.append(serviceName);
	m_msgName.append("WsFileIOPingResponse");
	unserialize(ctx,*params,attachments, NULL);
}

StringBuffer &CWsFileIOPingResponse::getXsdDefinition(IEspContext &context, CHttpRequest* request, const char *msgTypeName, StringBuffer &schema, BoolHash &added, const char *xns, const char *wsns, unsigned flags)
{
	if (!(flags & 0x100))
	{
		IProperties *props = request->queryParameters();
		if(msgTypeName) {
			if(added.getValue(msgTypeName))
				return schema;
			else
				added.setValue(msgTypeName, 1);
		}
		if (flags & 0x01) {
			schema.appendf("<xsd:element name=\"%s\"><xsd:complexType><xsd:all/></xsd:complexType></xsd:element>\n", msgTypeName);
		}
	}
	return schema;
}

void CWsFileIOPingResponse::getMapInfo(IMapInfo& info) {  BoolHash added; getMapInfo(info, added); }

void CWsFileIOPingResponse::getMapInfo(IMapInfo& info, BoolHash& added)
{
}

StringBuffer &CWsFileIOPingResponse::getHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &form, bool includeFormTag, const char *prefix)
{
	IProperties *props = request->queryParameters();
	if (includeFormTag) {
		StringBuffer params, versionTag;
		bool hasVersion = getUrlParams(props,params);
		if (!hasVersion) versionTag.appendf("%cver_=%g",params.length()?'&':'?',context.getClientVersion());
		form.appendf("\n<form name=\"esp_form\" method=\"POST\" enctype=\"application/x-www-form-urlencoded\" action=\"/%s/%s%s%s\">\n", serv, method, params.str(), versionTag.str());
	}
	StringBuffer extfix;
	form.append(" <table>\n");
	if (includeFormTag) {
		form.append("<tr><td></td><td><input type=\"submit\" value=\"Submit\" name=\"S1\" />");
		form.append(" &nbsp; <input type=\"reset\" value=\"Clear\"/> </td> </tr>");
	}
	form.append("</table>");
	if (includeFormTag)
		form.append("</form>");
	return form;
}

StringBuffer &CWsFileIOPingResponse::serializeHtml(IEspContext &context, const char *serv, const char *method, StringBuffer &html)
{
	return html;
}

void CWsFileIOPingResponse::serialize(IRpcMessage& rpc_resp)
{
	rpc_resp.set_ns("");
	rpc_resp.set_name(m_msgName.str());
	StringBuffer nsuri;
	nsuri.append("urn:hpccsystems:ws:").appendLower(m_serviceName.length(), m_serviceName.str());
	rpc_resp.set_nsuri(nsuri.str());

	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		StringBuffer xml;
		exceptions.serialize(xml, 0, true, false);
		rpc_resp.add_value("", "", "Exceptions", "", xml.str(), false);
	}
	else
	{
	}
}


void CWsFileIOPingResponse::copy(CWsFileIOPingResponse &from)
{
}


void CWsFileIOPingResponse::copy(IConstWsFileIOPingResponse &ifrom)
{
}


void CWsFileIOPingResponse::getAttributes(IProperties &attributes)
{
}


void CWsFileIOPingResponse::serializeContent(IEspContext* ctx, StringBuffer& buffer, IProperties **pprops)
{
	const IMultiException& exceptions = getExceptions();
	if (exceptions.ordinality() > 0)
	{
		if(ctx && ctx->getResponseFormat()==ESPSerializationJSON)
			exceptions.serializeJSON(buffer, 0, true);
		else
			exceptions.serialize(buffer, 0, true);
	}
	else
	{
	}
}


void CWsFileIOPingResponse::serializeAttributes(IEspContext* ctx, StringBuffer& s)
{
}

void CWsFileIOPingResponse::serializer(IEspContext* ctx, IConstWsFileIOPingResponse &src, StringBuffer& buffer, bool keepRootTag)
{
	if (keepRootTag)
	buffer.append("<WsFileIOPingResponse>");
	if (keepRootTag)
		buffer.append("</WsFileIOPingResponse>");
}

bool CWsFileIOPingResponse::unserialize(IRpcMessage& rpc_request, const char *tagname, const char *basepath)
{
	rpc_request.setEncodeXml(false);
	bool hasValue = false;
	StringBuffer xml;
	rpc_request.get_value("Exceptions", xml, false);

	Owned<IMultiException> me = MakeMultiException();
	if(xml.length() > 0)
		me->deserialize(xml.str());

	if (me->ordinality() > 0 )
	{
		IArrayOf<IException>& exceptions = me->getArray();
		ForEachItemIn(i, exceptions)
			noteException(*LINK(&exceptions.item(i)));
	}
	else
	{
	}
	return hasValue;
}

bool CWsFileIOPingResponse::unserialize(IEspContext* ctx, CSoapValue& soapval)
{
	bool hasValue = false;
	return hasValue;
}

bool CWsFileIOPingResponse::unserialize(IEspContext* ctx, IProperties& params, MapStrToBuf *attachments, const char *basepath)
{
	bool hasValue = false;
	return hasValue;
}

extern "C"  IEspWsFileIOPingResponse *createWsFileIOPingResponse(const char *serv){return ((IEspWsFileIOPingResponse *)new CWsFileIOPingResponse(serv));}
extern "C"  IClientWsFileIOPingResponse *createClientWsFileIOPingResponse(const char *serv){return ((IClientWsFileIOPingResponse *)new CWsFileIOPingResponse(serv));}

//=======================================================
// class CWsFileIOSoapBinding Implementation
//=======================================================

CWsFileIOSoapBinding::CWsFileIOSoapBinding(http_soap_log_level level):CHttpSoapBinding(NULL, NULL, NULL, level)
{
	init_strings();
	setWsdlVersion(1);
}

CWsFileIOSoapBinding::CWsFileIOSoapBinding(IPropertyTree* cfg, const char *bindname, const char *procname, http_soap_log_level level):CHttpSoapBinding(cfg, bindname, procname, level)
{
	init_strings(); 
	setWsdlVersion(1);

}

void CWsFileIOSoapBinding::init_strings()
{
}

int CWsFileIOSoapBinding::processRequest(IRpcMessage* rpc_call, IRpcMessage* rpc_response)
{
	if(rpc_call == NULL || rpc_response == NULL)
		return -1;

	IEspContext *ctx=rpc_call->queryContext();
	DBGLOG("Client version: %g", ctx->getClientVersion());
	StringBuffer serviceName;
	double clientVer=(ctx) ? ctx->getClientVersion() : 0.0;
	qualifyServiceName(*ctx, ctx->queryServiceName(NULL), NULL, serviceName, NULL);
	CRpcCall* thecall = static_cast<CRpcCall *>(rpc_call);
	CRpcResponse* response = static_cast<CRpcResponse*>(rpc_response);
	CHttpRequest* httprequest = thecall->getHttpReq();
	CHttpResponse* httpresponse = response->getHttpResp();

	Owned<IEspWsFileIO> iserv = (IEspWsFileIO*)getService();
	if(iserv == NULL)
	{
		response->set_status(SOAP_SERVER_ERROR);
		response->set_err("Service not available");
		DBGLOG("Service not available");
		return -1;
	}
	if (thecall->get_name() == NULL)
	{
		response->set_status(SOAP_CLIENT_ERROR);
		response->set_err("No service method specified");
		ERRLOG("No service method specified");
		return -1;
	}

	IEspContext& context = *rpc_call->queryContext();

	if(!stricmp(thecall->get_name(), "CreateFile")||!stricmp(thecall->get_name(), "CreateFileRequest"))
	{
		Owned<CCreateFileRequest> esp_request = new CCreateFileRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CCreateFileResponse> esp_response = new CCreateFileResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsFileIO::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsFileIO", "CreateFile");
			iserv->onCreateFile(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsFileIO", "CreateFile");
		response->set_name("CreateFileResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "Ping")||!stricmp(thecall->get_name(), "WsFileIOPingRequest"))
	{
		Owned<CWsFileIOPingRequest> esp_request = new CWsFileIOPingRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWsFileIOPingResponse> esp_response = new CWsFileIOPingResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsFileIO::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsFileIO", "Ping");
			iserv->onPing(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsFileIO", "Ping");
		response->set_name("WsFileIOPingResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "ReadFileData")||!stricmp(thecall->get_name(), "ReadFileDataRequest"))
	{
		Owned<CReadFileDataRequest> esp_request = new CReadFileDataRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CReadFileDataResponse> esp_response = new CReadFileDataResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsFileIO::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsFileIO", "ReadFileData");
			iserv->onReadFileData(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsFileIO", "ReadFileData");
		response->set_name("ReadFileDataResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	if(!stricmp(thecall->get_name(), "WriteFileData")||!stricmp(thecall->get_name(), "WriteFileDataRequest"))
	{
		Owned<CWriteFileDataRequest> esp_request = new CWriteFileDataRequest(serviceName.str(), thecall);
		checkRequest(context);
		Owned<CWriteFileDataResponse> esp_response = new CWriteFileDataResponse(serviceName.str());
		MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
		StringBuffer source;
		source.appendf("WsFileIO::%s()", thecall->get_name());
		Owned<IMultiException> me = MakeMultiException(source.str());
		try
		{
			response->set_status(SOAP_OK);
			if( accessmap.ordinality() > 0 )
				onFeaturesAuthorize(context, accessmap, "WsFileIO", "WriteFileData");
			iserv->onWriteFileData(context, *esp_request, *esp_response);
		}
		catch (IMultiException* mex)
		{
			me->append(*mex);
			mex->Release();
		}
		catch (IException* e)
		{
			me->append(*e);
		}
		catch (...)
		{
			me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
		}
		esp_response->handleExceptions(me, "WsFileIO", "WriteFileData");
		response->set_name("WriteFileDataResponse");
		if(!httprequest || !httpresponse)
		{
			esp_response->serialize(*response);
		}
		else
		{
			MemoryBuffer content;
			StringBuffer mimetype;
			esp_response->appendContent(&context,content, mimetype);
			onBeforeSendResponse(context,httprequest,content,serviceName.str(),thecall->get_name());
			httpresponse->setContent(content.length(), content.toByteArray());
			httpresponse->setContentType(mimetype.str());
			httpresponse->send();
			httpresponse->setRespSent(true);
		}
		return 0;
	}

	response->set_status(SOAP_CLIENT_ERROR);
	StringBuffer msg, svcName;
	msg.appendf("Method %s not available in service %s",thecall->get_name(),getServiceName(svcName).str());
	ERRLOG("%s", msg.str());
	response->set_err(msg);
	return -1;
}

int CWsFileIOSoapBinding::getXsdDefinition(IEspContext &context, CHttpRequest* request, StringBuffer &content, const char *service, const char *method, bool mda)
{
	BoolHash added;
	DBGLOG("Client version: %g", context.getClientVersion());
	bool fullservice = (!Utils::strcasecmp(service, "WsFileIO"));
	bool allMethods = (method==NULL || *method==0);
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "CreateFile"))) || Utils::strcasecmp(method, "CreateFile")==0)
	{
		CCreateFileRequest::getMapInfo(context.queryMapInfo());
		CCreateFileResponse::getMapInfo(context.queryMapInfo());
		CCreateFileRequest::getXsdDefinition(context, request, "CreateFileRequest", content, added);
		CCreateFileResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "Ping"))) || Utils::strcasecmp(method, "Ping")==0)
	{
		CWsFileIOPingRequest::getMapInfo(context.queryMapInfo());
		CWsFileIOPingResponse::getMapInfo(context.queryMapInfo());
		CWsFileIOPingRequest::getXsdDefinition(context, request, "WsFileIOPingRequest", content, added);
		CWsFileIOPingResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "ReadFileData"))) || Utils::strcasecmp(method, "ReadFileData")==0)
	{
		CReadFileDataRequest::getMapInfo(context.queryMapInfo());
		CReadFileDataResponse::getMapInfo(context.queryMapInfo());
		CReadFileDataRequest::getXsdDefinition(context, request, "ReadFileDataRequest", content, added);
		CReadFileDataResponse::getXsdDefinition(context, request, content, added);
	}
	if ((allMethods&&(fullservice||isMethodInSubService(context, service, "WriteFileData"))) || Utils::strcasecmp(method, "WriteFileData")==0)
	{
		CWriteFileDataRequest::getMapInfo(context.queryMapInfo());
		CWriteFileDataResponse::getMapInfo(context.queryMapInfo());
		CWriteFileDataRequest::getXsdDefinition(context, request, "WriteFileDataRequest", content, added);
		CWriteFileDataResponse::getXsdDefinition(context, request, content, added);
	}
	return 0;
}

int CWsFileIOSoapBinding::getMethodHtmlForm(IEspContext &context, CHttpRequest* request, const char *serv, const char *method, StringBuffer &page, bool bIncludeFormTag)
{
	DBGLOG("Client version: %g", context.getClientVersion());
	if (Utils::strcasecmp(method, "CreateFile")==0)
	{
		CCreateFileRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "Ping")==0)
	{
		CWsFileIOPingRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "ReadFileData")==0)
	{
		CReadFileDataRequest::getHtmlForm(context, request, serv, method, page);
	}
	if (Utils::strcasecmp(method, "WriteFileData")==0)
	{
		CWriteFileDataRequest::getHtmlForm(context, request, serv, method, page);
	}
	return 0;
}

int CWsFileIOSoapBinding::getQualifiedNames(IEspContext& ctx, MethodInfoArray & methods)
{
	double ver = ctx.getClientVersion();
	if (ver<=0)
		ver = getWsdlVersion();
	const char *servname=ctx.queryServiceName(NULL);
	bool fullservice = (!stricmp(servname, "esp")||!stricmp(servname, "WsFileIO"));
	if ((fullservice || isMethodInSubService(ctx, servname, "CreateFile")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("CreateFile", "CreateFileRequest", "CreateFileResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "Ping")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("Ping", "WsFileIOPingRequest", "WsFileIOPingResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "ReadFileData")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("ReadFileData", "ReadFileDataRequest", "ReadFileDataResponse"));
	if ((fullservice || isMethodInSubService(ctx, servname, "WriteFileData")) && ctx.isMethodAllowed(ver,NULL, NULL, -1, -1))
		methods.append(*new CMethodInfo("WriteFileData", "WriteFileDataRequest", "WriteFileDataResponse"));
	return methods.ordinality();
}

StringBuffer & CWsFileIOSoapBinding::getServiceName(StringBuffer &resp)
{
	resp.append("WsFileIO");
	return resp;
}

bool CWsFileIOSoapBinding::isValidServiceName(IEspContext &context, const char *name)
{
	if (!Utils::strcasecmp(name, "WsFileIO"))
		return true;
	else
		return (hasSubService(context, name));
}

bool CWsFileIOSoapBinding::qualifyMethodName(IEspContext &context, const char *methname, StringBuffer *methQName)
{
	if (!methname || !*methname)
	{
		if (methQName!=NULL)
			methQName->clear();
		return true;
	}
	if (Utils::strcasecmp(methname, "CreateFile")==0)
	{
		if (methQName!=NULL)
			methQName->set("CreateFile");
		return true;
	}
	if (Utils::strcasecmp(methname, "Ping")==0)
	{
		if (methQName!=NULL)
			methQName->set("Ping");
		return true;
	}
	if (Utils::strcasecmp(methname, "ReadFileData")==0)
	{
		if (methQName!=NULL)
			methQName->set("ReadFileData");
		return true;
	}
	if (Utils::strcasecmp(methname, "WriteFileData")==0)
	{
		if (methQName!=NULL)
			methQName->set("WriteFileData");
		return true;
	}
	return false;
}

bool CWsFileIOSoapBinding::qualifyServiceName(IEspContext &context, const char *servname, const char *methname, StringBuffer &servQName, StringBuffer *methQName)
{
	servQName.clear();
	if (!Utils::strcasecmp(servname, "WsFileIO"))
	{
		servQName.append("WsFileIO");
		return qualifyMethodName(context, methname, methQName);
	}
	return qualifySubServiceName(context, servname, methname, servQName, methQName);
}

int CWsFileIOSoapBinding::onGetFile(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *pathex)
{
	if(request == NULL || response == NULL)
		return -1;
	StringBuffer mimetype;
	MemoryBuffer content;

	StringBuffer filepath;
	getBaseFilePath(filepath);
	if (strchr("\\/", filepath.charAt(filepath.length()-1))==NULL)
		filepath.append("/");
	filepath.append(pathex);
	response->httpContentFromFile(filepath.str());
	response->send();
	return 0;
}

int CWsFileIOSoapBinding::onGetForm(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	if (!stricmp("CreateFile", method)) {
		CCreateFileRequest::getMapInfo(context.queryMapInfo());
		CCreateFileResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("Ping", method)) {
		CWsFileIOPingRequest::getMapInfo(context.queryMapInfo());
		CWsFileIOPingResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("ReadFileData", method)) {
		CReadFileDataRequest::getMapInfo(context.queryMapInfo());
		CReadFileDataResponse::getMapInfo(context.queryMapInfo());
	}
	if (!stricmp("WriteFileData", method)) {
		CWriteFileDataRequest::getMapInfo(context.queryMapInfo());
		CWriteFileDataResponse::getMapInfo(context.queryMapInfo());
	}

	return EspHttpBinding::onGetForm(context, request, response, service, method);
}
int CWsFileIOSoapBinding::onGetXForm(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	return EspHttpBinding::onGetXForm(context, request, response, service, method);
}

int CWsFileIOSoapBinding::onGetService(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method, const char *pathex)
{
	if(request == NULL || response == NULL)
		return -1;
	return onGetQuery(context, request, response, service, method);
}

 IRpcRequestBinding *CWsFileIOSoapBinding::createReqBinding(IEspContext &context, IHttpMessage *ireq, const char *service, const char *method)
{
	CHttpRequest *request=static_cast<CHttpRequest*>(ireq);
	IProperties *props = (request) ? request->queryParameters() : NULL;

	if (!stricmp(method, "CreateFile") || !stricmp(method, "CreateFileRequest"))
		return new CCreateFileRequest(&context, "WsFileIO", props, NULL);
	if (!stricmp(method, "Ping") || !stricmp(method, "WsFileIOPingRequest"))
		return new CWsFileIOPingRequest(&context, "WsFileIO", props, NULL);
	if (!stricmp(method, "ReadFileData") || !stricmp(method, "ReadFileDataRequest"))
		return new CReadFileDataRequest(&context, "WsFileIO", props, NULL);
	if (!stricmp(method, "WriteFileData") || !stricmp(method, "WriteFileDataRequest"))
		return new CWriteFileDataRequest(&context, "WsFileIO", props, NULL);
	return NULL;
}

int CWsFileIOSoapBinding::onGetInstantQuery(IEspContext &context, CHttpRequest* request, CHttpResponse* response, const char *service, const char *method)
{
	if(request == NULL || response == NULL)
		return -1;
	StringBuffer respStr;
	Owned<IEspWsFileIO> iserv = (IEspWsFileIO*)getService();
	if(iserv == NULL)
	{
		respStr.append("Service not available");
		response->setContent(respStr.str());
		response->setContentType("text/html");
		response->send();
	}
	else
	{
		Owned<CSoapResponseBinding> esp_response;
		StringBuffer source;
		IEspContext& context = *request->queryContext();
		if(!stricmp(method, "CreateFile")||!stricmp(method, "CreateFileRequest"))
		{
			Owned<CCreateFileRequest> esp_request = new CCreateFileRequest(&context, "WsFileIO", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CCreateFileResponse* resp = new CCreateFileResponse("WsFileIO");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsFileIO::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsFileIO", "CreateFile");
				iserv->onCreateFile(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsFileIO", "CreateFile", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "Ping")||!stricmp(method, "WsFileIOPingRequest"))
		{
			Owned<CWsFileIOPingRequest> esp_request = new CWsFileIOPingRequest(&context, "WsFileIO", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWsFileIOPingResponse* resp = new CWsFileIOPingResponse("WsFileIO");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsFileIO::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsFileIO", "Ping");
				iserv->onPing(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsFileIO", "Ping", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "ReadFileData")||!stricmp(method, "ReadFileDataRequest"))
		{
			Owned<CReadFileDataRequest> esp_request = new CReadFileDataRequest(&context, "WsFileIO", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CReadFileDataResponse* resp = new CReadFileDataResponse("WsFileIO");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsFileIO::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsFileIO", "ReadFileData");
				iserv->onReadFileData(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsFileIO", "ReadFileData", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}
		if(!stricmp(method, "WriteFileData")||!stricmp(method, "WriteFileDataRequest"))
		{
			Owned<CWriteFileDataRequest> esp_request = new CWriteFileDataRequest(&context, "WsFileIO", request->queryParameters(), request->queryAttachments());
			checkRequest(context);
			CWriteFileDataResponse* resp = new CWriteFileDataResponse("WsFileIO");
			esp_response.setown(resp);
			MapStringTo<SecAccessFlags> accessmap;

//WARNING: Developer has suppressed automatic feature level authorization, ensure this behavior is correct!
			source.setf("WsFileIO::%s()", method);
			Owned<IMultiException> me = MakeMultiException(source.str());
			try
			{
				if(accessmap.ordinality()>0)
					onFeaturesAuthorize(context, accessmap, "WsFileIO", "WriteFileData");
				iserv->onWriteFileData(context, *esp_request.get(), *resp);
			}
			catch (IMultiException* mex)
			{
				me->append(*mex);
				mex->Release();
			}
			catch (IException* e)
			{
				me->append(*e);
			}
			catch (...)
			{
				me->append(*MakeStringExceptionDirect(-1, "Unknown Exception"));
			}
			if (response->handleExceptions(xslp, me, "WsFileIO", "WriteFileData", StringBuffer(getCFD()).append("./smc_xslt/exceptions.xslt").str()))
				return 0;
		}

		if (esp_response.get())
		{
			if (canRedirect(*request) && esp_response->getRedirectUrl() && *esp_response->getRedirectUrl())
				response->redirect(*request, esp_response->getRedirectUrl());
			else
			{
				MemoryBuffer content;
				StringBuffer mimetype;
				esp_response->appendContent(&context,content, mimetype);
				onBeforeSendResponse(context,request,content,service,method);
				response->setContent(content.length(), content.toByteArray());
				response->setContentType(mimetype.str());
				response->send();
			}
			return 0;
		}
	}
	return onGetNotFound(context, request,  response, service);
}





//=======================================================
// client util methods
//=======================================================

//------ method CreateFile ---------

IClientCreateFileRequest * CClientWsFileIO::createCreateFileRequest()
{
	CCreateFileRequest* request = new CCreateFileRequest("WsFileIO");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientCreateFileResponse * CClientWsFileIO::CreateFile(IClientCreateFileRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CCreateFileRequest* esprequest = static_cast<CCreateFileRequest*>(request);
	CCreateFileResponse* espresponse = new CCreateFileResponse("WsFileIO");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsFileIO::async_CreateFile(IClientCreateFileRequest *request, IClientWsFileIOEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CCreateFileRequest* esprequest = static_cast<CCreateFileRequest*>(request);
	esprequest->setMethod("CreateFile");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsFileIO::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientCreateFileResponse *CClientWsFileIO::CreateFileFn(const char * DestDropZone_, const char * DestRelativePath_, bool Overwrite_)
{
	Owned<IClientCreateFileRequest> req =  createCreateFileRequest();
	req->setDestDropZone(DestDropZone_);
	req->setDestRelativePath(DestRelativePath_);
	req->setOverwrite(Overwrite_);
	return CreateFile(req.get());
}

//------ method Ping ---------

IClientWsFileIOPingRequest * CClientWsFileIO::createPingRequest()
{
	CWsFileIOPingRequest* request = new CWsFileIOPingRequest("WsFileIO");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientWsFileIOPingResponse * CClientWsFileIO::Ping(IClientWsFileIOPingRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWsFileIOPingRequest* esprequest = static_cast<CWsFileIOPingRequest*>(request);
	CWsFileIOPingResponse* espresponse = new CWsFileIOPingResponse("WsFileIO");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsFileIO::async_Ping(IClientWsFileIOPingRequest *request, IClientWsFileIOEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWsFileIOPingRequest* esprequest = static_cast<CWsFileIOPingRequest*>(request);
	esprequest->setMethod("Ping");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsFileIO::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWsFileIOPingResponse *CClientWsFileIO::PingFn()
{
	Owned<IClientWsFileIOPingRequest> req =  createPingRequest();
	return Ping(req.get());
}

//------ method ReadFileData ---------

IClientReadFileDataRequest * CClientWsFileIO::createReadFileDataRequest()
{
	CReadFileDataRequest* request = new CReadFileDataRequest("WsFileIO");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientReadFileDataResponse * CClientWsFileIO::ReadFileData(IClientReadFileDataRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CReadFileDataRequest* esprequest = static_cast<CReadFileDataRequest*>(request);
	CReadFileDataResponse* espresponse = new CReadFileDataResponse("WsFileIO");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsFileIO::async_ReadFileData(IClientReadFileDataRequest *request, IClientWsFileIOEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CReadFileDataRequest* esprequest = static_cast<CReadFileDataRequest*>(request);
	esprequest->setMethod("ReadFileData");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsFileIO::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientReadFileDataResponse *CClientWsFileIO::ReadFileDataFn(const char * DestDropZone_, const char * DestRelativePath_, __int64 Offset_, __int64 DataSize_)
{
	Owned<IClientReadFileDataRequest> req =  createReadFileDataRequest();
	req->setDestDropZone(DestDropZone_);
	req->setDestRelativePath(DestRelativePath_);
	req->setOffset(Offset_);
	req->setDataSize(DataSize_);
	return ReadFileData(req.get());
}

//------ method WriteFileData ---------

IClientWriteFileDataRequest * CClientWsFileIO::createWriteFileDataRequest()
{
	CWriteFileDataRequest* request = new CWriteFileDataRequest("WsFileIO");
	request->setProxyAddress(soap_proxy.str());
	request->setUrl(soap_url.str());
	return request;
}

IClientWriteFileDataResponse * CClientWsFileIO::WriteFileData(IClientWriteFileDataRequest *request)
{
	if(soap_url.length()== 0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWriteFileDataRequest* esprequest = static_cast<CWriteFileDataRequest*>(request);
	CWriteFileDataResponse* espresponse = new CWriteFileDataResponse("WsFileIO");

	espresponse->setReqId(soap_reqid++);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword(soap_password.str());
	esprequest->soap_setRealm(soap_realm.str());
	const char *soapaction=(soap_action.length()) ? soap_action.str() : NULL;
	esprequest->post(soap_proxy.str(), soap_url.str(), *espresponse, soapaction);
	return espresponse;
}

void CClientWsFileIO::async_WriteFileData(IClientWriteFileDataRequest *request, IClientWsFileIOEvents *events,IInterface* state)
{
	if(soap_url.length()==0){ throw MakeStringExceptionDirect(-1, "url not set"); }

	CWriteFileDataRequest* esprequest = static_cast<CWriteFileDataRequest*>(request);
	esprequest->setMethod("WriteFileData");
	esprequest->setReqId(soap_reqid++);
	esprequest->setEventSink(events);
	esprequest->setState(state);
	esprequest->soap_setUserId( soap_userid.str());
	esprequest->soap_setPassword( soap_password.str());
	esprequest->soap_setRealm( soap_realm.str());
#ifdef USE_CLIENT_THREAD
	esprequest->setThunkHandle(GetThunkingHandle());
#endif
	esprequest->Link();

	if(state!=NULL)
		state->Link();

#ifdef _WIN32
	_beginthread(espWorkerThread, 0, (void *)(IRpcRequestBinding *)(esprequest));
#else
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
	pthread_attr_setstacksize(&attr, 0x10000);
	ThreadId threadid;
	int status;
	do
	{
		status = pthread_create(&threadid, &attr, CClientWsFileIO::espWorkerThread, (void *)(IRpcRequestBinding *)(esprequest));
	} while (0 != status && (errno == EINTR));
	if (status) {
		Release();
		throw makeOsException(errno);
	}
#endif
}

IClientWriteFileDataResponse *CClientWsFileIO::WriteFileDataFn(const MemoryBuffer & Data_, const char * DestDropZone_, const char * DestRelativePath_, __int64 Offset_, bool Append_)
{
	Owned<IClientWriteFileDataRequest> req =  createWriteFileDataRequest();
	req->setData(Data_);
	req->setDestDropZone(DestDropZone_);
	req->setDestRelativePath(DestRelativePath_);
	req->setOffset(Offset_);
	req->setAppend(Append_);
	return WriteFileData(req.get());
}

int CClientWsFileIO::transferThunkEvent(void *data)
{
	IRpcResponseBinding *response = (IRpcResponseBinding *)data;
	if (response!=NULL)
	{
		IClientWsFileIOEvents *eventSink = (IClientWsFileIOEvents *)response->getEventSink();
		response->lock();

		if (stricmp(response->getMethod(), "CreateFile")==0)
		{
			IClientCreateFileResponse* icresp = dynamic_cast<IClientCreateFileResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onCreateFileComplete(icresp, response->queryState());
				else
					eventSink->onCreateFileError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "Ping")==0)
		{
			IClientWsFileIOPingResponse* icresp = dynamic_cast<IClientWsFileIOPingResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onPingComplete(icresp, response->queryState());
				else
					eventSink->onPingError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "ReadFileData")==0)
		{
			IClientReadFileDataResponse* icresp = dynamic_cast<IClientReadFileDataResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onReadFileDataComplete(icresp, response->queryState());
				else
					eventSink->onReadFileDataError(icresp,response->queryState());
			}
		}
		if (stricmp(response->getMethod(), "WriteFileData")==0)
		{
			IClientWriteFileDataResponse* icresp = dynamic_cast<IClientWriteFileDataResponse*>(response);
			if (icresp) {
				if (response->getRpcState() == RPC_MESSAGE_OK)
					eventSink->onWriteFileDataComplete(icresp, response->queryState());
				else
					eventSink->onWriteFileDataError(icresp,response->queryState());
			}
		}
		response->unlock();
	}
	return 0;
}

static IRpcResponseBinding* createWsFileIOResponseObject(IRpcRequestBinding *request)
{
	const char* method = request->getMethod();
	if (stricmp(method, "CreateFile")==0)
		return new CCreateFileResponse("WsFileIO", request);
	if (stricmp(method, "Ping")==0)
		return new CWsFileIOPingResponse("WsFileIO", request);
	if (stricmp(method, "ReadFileData")==0)
		return new CReadFileDataResponse("WsFileIO", request);
	if (stricmp(method, "WriteFileData")==0)
		return new CWriteFileDataResponse("WsFileIO", request);
	return NULL;
}

#ifdef _WIN32
void CClientWsFileIO::espWorkerThread(void* data)
#else
void *CClientWsFileIO::espWorkerThread(void *data)
#endif
{
	IRpcRequestBinding *request = (IRpcRequestBinding *) data;

	if (request != NULL)
	{
		request->lock();
		IRpcResponseBinding *response=createWsFileIOResponseObject(request);
		if (response!=NULL)
		{
			try{
				request->post(*response);
			}
			catch(IException* ex){
				StringBuffer errorStr;
				ex->errorMessage(errorStr);
				ERRLOG("CClientWsFileIO::espWorkerThread(%s)--Exception caught while posting async request: %s", request->getMethod(), errorStr.str());
				ex->Release();
			}
			catch(...){
				ERRLOG("Unknown exception caught while posting async request");
			}
		}
#ifdef USE_CLIENT_THREAD
		ThunkToClientThread(request->getThunkHandle(), transferThunkEvent, (void *)response);
#else
		transferThunkEvent((void *)response);
#endif
		request->unlock();
		if(request->queryState()!=NULL)
			request->queryState()->Release();

		if(response!=NULL)
			response->Release();

		request->Release();
	}
#if defined(_WIN32)
#else
	return (void *) 0 ;
#endif
}



extern "C" IClientWsFileIO * createWsFileIOClient() {  return new CClientWsFileIO(); }


#endif //ws_fileio_ESPGEN_INCLUDED
